<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-03-21T15:41:41+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014年3月总结]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/03/21/headline/"/>
    <updated>2014-03-21T10:21:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/03/21/headline</id>
    <content type="html"><![CDATA[<h3>JavaScript中的promise模式</h3>

<p>Promise模式简单来说就是函数返回一个promise对象，这个promise对象可能有三种状态：未完成、 已完成、 已拒绝。
对于传统的回调函数写法来说：</p>

<pre><code>funcion test(){
  do_something();
  do_something();
  getData(data, function(err, data){
    if (err){ 
      error_handle(); 
    }
    else{
      success_handle();
    }
  })
}
</code></pre>

<p>错误处理和成功处理都是在回调中进行，在逻辑复杂的情况下极易形成回调嵌套。而对于promise模式来说则是这样(这里以promise库Q为例):</p>

<pre><code>var Q = require('q');
function test(){
  var deferred = Q.defer();
  do_something();
  getData(data, function(err, data){
    if(err){
      deferred.reject();
    }
    else{
      deferred.resolve()
    }
  })
  return deferred.promise
}
test.then(success_handle, error_handle)
</code></pre>

<h3>CORS问题</h3>

<p>CORS全称Cross-Origin resource sharing， 即:跨域资源共享
对于简单请求, 在服务端设置如下响应头：</p>

<pre><code>Access-Control-Allow-Origin: *
</code></pre>

<p>这样就可以完成简单的跨域请求<br/>
如果浏览器请求不被认为是一个simple header,比如你要自定义一个头信息, 这个请求会被认为是一个<code>preflight request</code>.  这时发送请求时header中会带有如下的信息：</p>

<pre><code>Request Method:OPTIONS
Access-Control-Request-Headers:accept, params-token, content-type
Access-Control-Request-Method:POST
</code></pre>

<p> 服务器需要设置返回头:</p>

<pre><code>Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
</code></pre>

<p>服务器会根据request提交的header进行检查，如果检查没通过，就抛出错误，检查通过，则会将结果进行缓存，并会在responds的header中附带上这些信息，告诉浏览器可以进行通信。然后浏览器再发送真正的http请求。<br/>
也就是说，服务器和浏览器的第一次通信会出现两次http请求。第一次用于双方的确认，确认通过后，结果会被缓存，在缓存过期前就无需重复确认了。</p>

<p><strong>参考文章:</strong> <br/>
<a href="http://www.w3cmm.com/ajax/preflighted-requests.html">Preflighted Requests</a><br/>
<a href="http://semicircle.github.io/blog/2013/09/29/go-with-cors/">用Go实现CORS跨域资源共享的服务器支持</a></p>

<h3>nginx代理的问题</h3>

<p>在部署时发现的问题：req.headers.host得到的并不是域名，而是127.0.0.1:3000, 经过查阅发现是Nginx配置的问题，需要配置如下两行：</p>

<pre><code>proxy_set_header Host $http_host;
proxy_set_header X-Forward-For $remote_addr;
</code></pre>

<p>proxy_set_header 用于覆盖或新增request的header，如果不配置上面两行，那么后台程序会认为通信来自：</p>

<pre><code>nginx &lt;=&gt; server
</code></pre>

<p>那么得到的客户端ip就是nginx的ip，得到的host是后台服务的host。如果后台服务配置了访问限制，那么显然会把nginx给限制掉，配置了这两行后，后台才能得到正确的信息：</p>

<pre><code>client &lt;=&gt; nginx
</code></pre>

<p>这里的<code>$http_host</code>和<code>$remote_addr</code>都是nginx的导出变量，可以在配置文件中直接使用。如果Host请求头部没有出现在请求头中，则<code>$http_host</code>值为空，但是<code>$host</code>值为主域名。因此，一般而言，会用<code>$host</code>代替<code>$http_host</code>变量，从而避免http请求中丢失Host头部的情况下Host不被重写的失误。</p>

<h3>工具总结</h3>

<pre><code>"restify": "~2.6.1",
"request": "&gt;=2.0.0",
"mongoose": "~3.8.7",
"redis": "x",
"async": "~0.2.10",
"q": "~1.0.0",
"log4js": "~0.6.10",
"moment": "x",
"connect": "x",
"lodash": "~2.4.1",
"winston": "~0.7.2",
"winston-mongodb": "~0.4.3",
"sanitize-html": "x"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node学习笔记二]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/02/12/node-2/"/>
    <updated>2014-02-12T10:44:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/02/12/node-2</id>
    <content type="html"><![CDATA[<h3>npm包简介</h3>

<p>Node可以以包的形式封装插件，不同于Ruby的gem包，Node的包默认并不是全局安装的，而是安装在项目目录中的<code>node_modules</code>目录下。只作用于项目目录。<br/>
如果需要全局安装，比如一些带有命令行工具的npm包，在安装时需要加上<code>-g</code>命令，例如：</p>

<pre><code>$ npm install -g supervisor
</code></pre>

<p>使用全局模式安装时,npm 会将包安装到系统目录,譬如 <code>/usr/local/lib/node_modules/</code>,同时 <code>package.json</code> 文件中 bin 字段包含的文件会被链接到 <code>/usr/local/bin/</code>。</p>

<p>需要注意的是使用全局模式安装的包并不能直接在 JavaScript 文件中用 require 获得,因为 require 不会搜索 /usr/local/lib/node_modules/。如果想要require全局包，可以使用</p>

<pre><code>$ npm link package
</code></pre>

<p>这个命令会在项目内的<code>node_modules</code>创建一个指向全局包的符号链接。通过这种方法,我们就可以把全局包当本地包来使用了。</p>

<h3>制作npm包</h3>

<p> 一个基本的npm包需要包含一个<code>package.json</code>文件，一个<code>lib</code>文件夹,在<code>lib</code>文件夹内编写主要的逻辑，<code>package.json</code>文件则包含了该npm包的一些信息。
 <code>package.json</code>需要包含一个名为main的key，</p>

<pre><code> {
  "main": "./lib/test.js",
 }  
</code></pre>

<p> 完整的npm包往往还需要一些其他的功能，例如测试，文档等</p>

<ul>
<li><code>package.json</code> 必须在包的顶层目录下;</li>
<li>二进制文件应该在 <code>bin</code> 目录下; * JavaScript代码应该在 <code>lib</code> 目录下; * 文档应该在 <code>doc</code> 目录下; * 单元测试应该在 <code>test</code> 目录下。
包的功能完成后，使用
 $ npm init
这时会让你填写package的value，依次填写即可，完成后就可以发布了。</li>
</ul>


<h3>发布npm包</h3>

<p>如果要发布npm包，需要注册一个账号，首先需要执行</p>

<pre><code>$ npm config set email
</code></pre>

<p>然后执行</p>

<pre><code>$ npm adduser
</code></pre>

<p>之后就可以跟据提示输入用户名，密码，邮箱。完成后输入<code>npm whoami</code>可以查询是否注册成功。
注册完成后，在项目目录输入</p>

<pre><code>$ npm publish
</code></pre>

<p>稍后片刻就完成项目的发布了。</p>
]]></content>
  </entry>
  
</feed>
