<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2013-12-06T10:56:44+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记二：核心语法（数组）]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/24/javascript-array/"/>
    <updated>2013-04-24T14:11:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/24/javascript-array</id>
    <content type="html"><![CDATA[<h3>创建数组</h3>

<h4>字面量直接创建</h4>

<p>example:</p>

<pre><code> var arr=[1,2,3,4,5];
</code></pre>

<h4>使用构造函数array创建</h4>

<p>example:</p>

<pre><code> var arr=new array()  // 创建一个空数组
 var arr=new array(10)  // 创建一个长度为10 的数组
 var arr=new array(1，2，3)  // 相当于字面量直接创建
</code></pre>

<h3>数组方法</h3>

<h4>join()</h4>

<p>将数组转化为字符串序列，参数为分隔符</p>

<h4>reverse()</h4>

<p>将原数组倒序排列</p>

<h4>sort()</h4>

<p>根据字母表排序</p>

<h4>concat()</h4>

<p>数组合并</p>

<h4>slice()</h4>

<p>返回指定的数组片段</p>

<h4>splice()</h4>

<p>在数组中插入或删除元素的通用方法</p>

<h4>push()&amp;pop()</h4>

<p>在队尾实现添加或删除，实现类似堆栈的功能</p>

<h4>unshift()&amp;shift()</h4>

<p>在队头实现添加或者删除。</p>

<h3>数组方法分类</h3>

<h4>改变原数组：</h4>

<p>reverse() , splice() , push()&amp;pop() , unshift()&amp;shift()</p>

<h4>返回新数组：</h4>

<p>concat()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery插件开发]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/22/a-jquery-example/"/>
    <updated>2013-04-22T18:48:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/22/a-jquery-example</id>
    <content type="html"><![CDATA[<p>JQuery插件的开发是有一套成熟的规范的：
主要由以下几部分组成：</p>

<h4>(function($){})(jQuery)</h4>

<p>最外层的封装</p>

<h4>$.fn</h4>

<p>$.fn = JQuery.prototype。<br/>
在插件制作中，所有的对象方法都添加到$.fn对象中</p>

<h4>$.extend和$.fn.extend()</h4>

<p>extend(dest,src1,src2):将src1,src2合并到dest中，属性名相同的则后面的自动覆盖前面的，因此常用于default值的设置
extend(boolean dest,src1,src2):如果第一个参数为布尔值，则决定是否深层覆盖，如果为true，则嵌套的对象也将进行覆盖</p>

<pre><code>$.extend(src)    //该方法将src合并到jquery的全局对象中,为JQuery添加了一个静态方法，可以用$.src()直接执行
$.fn.extend(src) //该方法将src合并到jquery的实例对象中，只有JQuery的实例才可以调用，比如$("#input").src()
</code></pre>

<h4>this.each(function(){ })</h4>

<p>编写该扩展方法执行的函数</p>

<p>example：</p>

<pre><code>(function($){ 
  $.fn.tableUI = function(options){ 
    var defaults = { 
      evenRowClass:"evenRow", 
      oddRowClass:"oddRow", 
      activeRowClass:"activeRow" 
    } 
    var options = $.extend(defaults, options); 
    this.each(function(){ 
      var thisTable=$(this); 
      $(thisTable).find("tr:even").addClass(options.evenRowClass); 
      $(thisTable).find("tr:odd").addClass(options.oddRowClass); 
      $(thisTable).find("tr").bind("mouseover",function(){ 
        $(this).addClass(options.activeRowClass); 
        }); 
        $(thisTable).find("tr").bind("mouseout",function(){ 
          $(this).removeClass(options.activeRowClass); 
          }); 
          }); 
        }; 
})(jQuery); 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript插件开发]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/22/a-js-example/"/>
    <updated>2013-04-22T17:43:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/22/a-js-example</id>
    <content type="html"><![CDATA[<p>用一个样例来讲述javascript插件的开发过程，虽然工作中更多的使用JQuery，但是原生js基础仍然很重要。
功能说明：一幅长长的画卷，按照一定的速度，或垂直，或水平循环滚动，在指定位置暂停X秒，鼠标进入停止，可以用按钮控制。
可以控制的属性：
direction: 方向水平or垂直
stop_time: 暂停时间
hover_control: 鼠标进入是否停止
stop_position: 暂停位置（px）
id：滚动体的id
container:滚动体容器的id</p>

<pre><code>var scroll={
  container:"content",
  id: "box",
  dirction:"marginTop",
  stop_time:3000,
  hover_control:"on",
  stop_position:[330, 660]
}
var scroll_module = (function(){
  var container = document.getElementById(scroll.container);
  var scroll_part = document.getElementById(scroll.id);
  var divheight= scroll_part.offsetHeight
  var part2 = scroll_part.cloneNode(true);
  container.appendChild(part2);
  var martop = parseInt(scroll_part.style.marginTop || 0 )
  var hoverover = false;
  var go = function(){
    martop = martop - 2;
    scroll_part.style.marginTop = martop + "px";
    timer = setTimeout(go , 5);
    for (var i=0,j=i+1;i&lt;scroll.stop_position.length+1;i++){
      if (martop &lt;=-divheight){
        martop = 0;
        clearTimeout(timer);
        setTimeout(function(){
          go()
        },scroll.stop_time)
      }
      else if (martop== -scroll.stop_position[i]){
        clearTimeout(timer);
        if(hoverover == false){
          setTimeout(function(){
            go()
          },scroll.stop_time)
        }
      }
    }
  }
  var hoveron = function(){
    scroll_part.onmouseover=function(){
      hoverover = true;
      alert(hoverover)
    }
    scroll_part.onmouseout=function(){
      go();
      hoverover = false;
      alert(hoverover)
    }
  }
   return {
     go : go,
     hoveron : hoveron
    }
})()
  scroll_module.go();
  scroll_module.hoveron();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记三：事件处理]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/02/event/"/>
    <updated>2013-04-02T11:11:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/02/event</id>
    <content type="html"><![CDATA[<h3>注册事件处理程序</h3>

<h4>为javascript对象设置事件处理</h4>

<p>用“on+事件名”来注册事件
example：</p>

<pre><code>window.onload = function(){
    .......
}
</code></pre>

<h4>为HTML标签设置事件处理</h4>

<p>有一系列标准方法： <br/>
onfocus , onblur , onresize , ononline onafterprint , onundo , onredo , onload , onerror , onstorage , onhashchange <br/>
onmessage , onoffline , onpagehide , onhaschange , onbeforeprint , onunload , onbeforeunload , onpopstate</p>

<p>example:</p>

<pre><code>&lt;button onclick = "alert("Thank you!")"&gt;click me&lt;/button&gt;
</code></pre>

<h4>addEventListener( )</h4>

<p>IE8之前的版本不支持，忽略。三个参数("click" , function(){....} , false)</p>

<h3>表单事件</h3>

<h3>window事件</h3>

<h3>鼠标事件</h3>

<p>click：点击事件 <br/>
dbclick:双击 <br/>
mousedown:按下鼠标 <br/>
mouseup：释放鼠标 <br/>
mousemove：移动鼠标 <br/>
mouseover , mouseenter（不冒泡）：鼠标进入元素 <br/>
mouseout , mouseleave(不冒泡)：鼠标离开元素</p>

<h3>键盘事件</h3>

<h3>DOM事件</h3>

<h3>HTML5事件</h3>

<h3>触摸屏事件</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记一：核心语法(对象)]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/01/basic-javascript-values/"/>
    <updated>2013-04-01T14:56:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/01/basic-javascript-values</id>
    <content type="html"><![CDATA[<h3>数据类型：</h3>

<p>javascript中有六种基础数据类型：数字，字符串，布尔值，对象，函数，以及undefined。</p>

<h3>运算符：</h3>

<h3>创建对象：</h3>

<h4>对象直接量：</h4>

<pre><code>var empty = {}
var book = {
    "main title" : "javascript" , 
    "for" : "all" ,
    "author" : "xieyu"
}
</code></pre>

<h4>使用new运算符创建对象：</h4>

<pre><code>var o = new Object(); //创建一个空对象，和{}一样
var a = new Array(); //创建一个空数组，和[]一样
</code></pre>

<h4>使用Object.create():</h4>

<pre><code>参数是用于继承的原型对象
var o1 = Object.create({x:1 , y:2});
</code></pre>

<h4>原型(prototype)</h4>

<p>除了null之外所有对象都继承于Obiect.prototype</p>
]]></content>
  </entry>
  
</feed>
