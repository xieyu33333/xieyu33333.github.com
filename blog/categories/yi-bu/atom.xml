<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 异步 | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/yi-bu/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2013-12-25T11:45:43+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby 同步/异步/多线程模型测试]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce/"/>
    <updated>2013-12-25T11:30:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce</id>
    <content type="html"><![CDATA[<p>测试条件是对一个json接口进行1000次调用。</p>

<h3>同步模型：</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
1000.times do
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
</code></pre>

<p>执行总时间1：28秒。</p>

<h3>异步模型</h3>

<p>异步回调模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'json'
1000.times do
  EventMachine.run {
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    http.errback { p 'Uh oh'; EM.stop }
    http.callback {
      req = http.response
      @slides = JSON.parse(req)["data"]["list"]
      p @slides[0]
      EM.stop
    }
  }
end
</code></pre>

<p>纤程模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'em-synchrony'
require 'json'
require 'em-synchrony/em-http'   
1000.times do
  EM.synchrony do
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    p @slides[0]
    EM.stop
  end
end
</code></pre>

<p>两种异步模型基本一样，测试均为50秒完成。</p>

<h3>多线程模型</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
def func1
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
200.times do
  threads = []
  5.times do 
    threads &lt;&lt; Thread.new { func1 }
  end
  threads.each { |t| t.join }
end
</code></pre>

<p>5并发执行200次测试42秒完成，最快，但是50并发执行20次时居然高达3分23秒。</p>
]]></content>
  </entry>
  
</feed>
