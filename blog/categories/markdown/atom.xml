<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-02-14T17:23:36+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[markdown转换为pdf的解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/30/markdownzhuan-huan-wei-pdffang-an/"/>
    <updated>2013-12-30T10:10:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/30/markdownzhuan-huan-wei-pdffang-an</id>
    <content type="html"><![CDATA[<h2>解决方案一：Kitabu</h2>

<h3>简介</h3>

<p>Kitabu是使用ruby生成电子书的方案，它本身支持markdown转换为epub和html格式，不过通过调用其他指定的依赖
来转换为mobi、pdf、txt等其他格式。 <br/>
<strong>依赖prince进行html向pdf的转换。</strong>      <br/>
<strong>依赖html2text进行html向txt的转换。</strong> <br/>
<strong>依赖KindleGen进行epub向mobi的转换。</strong> <br/>
Kitabu支持代码高亮，默认使用codeRay，也可以安装 pygments.rb进行代替 。 <br/>
Github地址：<a href="https://github.com/fnando/kitabu">https://github.com/fnando/kitabu</a></p>

<h3>安装方法</h3>

<h4>第一步 安装 Kitabu</h4>

<pre><code>$ gem install kitabu            
</code></pre>

<p>安装完毕后就可以使用kitabu系列命令了。</p>

<h4>第二步 检查需要的依赖是否安装</h4>

<pre><code>$ kitabu check    
</code></pre>

<p>命令行中会给出哪些已经安装，哪些未安装。例如：</p>

<pre><code> Prince XML: Converts HTML files into PDF files.
 Installed.
 KindleGen: Converts ePub e-books into .mobi files.
 Installed.
 html2text: Converts HTML documents into plain text.
 Not installed.
 pygments.rb: A generic syntax highlight. If installed, replaces CodeRay.
 Not installed.
</code></pre>

<h4>第三步 生成电子书制作目录</h4>

<pre><code>$ kitabu new mybook          
</code></pre>

<p>在当前文件夹下生成一个名为mybook的文件夹，进入文件夹后可以看到如下文件结构：</p>

<pre><code>mybook
    ├── code
    ├── config
    │   ├── helper.rb
    │   └── kitabu.yml
    ├── images
    ├── output
    ├── templates
    │   ├── epub
    │   │   ├── cover.erb
    │   │   ├── cover.png
    │   │   ├── page.erb
    │   │   └── user.css
    │   └── html
    │       ├── layout.css
    │       ├── layout.erb
    │       ├── syntax.css
    │       └── user.css
    └── text
        └── 01_Welcome.md
</code></pre>

<h4>第四步 生成各种格式的电子书</h4>

<pre><code>$ kitabu export
</code></pre>

<p>生成的文件会放在output文件夹中。</p>

<h3>使用中遇到的问题</h3>

<h4>转换PDF时中文无法解析</h4>

<p>解决方法： <br/>
  1.需要在本地安装中文字体。  <br/>
  2.在模板中添加中文字体。</p>

<h4>PDF中的代码出现没有对齐的情况。</h4>

<pre><code>Prince XML: Converts HTML files into PDF files.
Installed.
KindleGen: Converts ePub e-books into .mobi files.
Installed.
html2text: Converts HTML documents into plain text.
Not installed.
pygments.rb: A generic syntax highlight. If installed, replaces CodeRay.
Not installed.
</code></pre>

<h2>目前最常用的解决方案：pandoc</h2>

<h3>pandoc简介</h3>

<p>如果你需要文件格式的转换，pandoc 可以成为你的瑞士军刀，它可以将下列格式： markdown, reStructuredText, textile, HTML
, DocBook, LaTeX, MediaWiki markup, OPML,  Haddock 转换为：</p>

<pre><code>     HTML formats: XHTML, HTML5, and HTML slide shows using Slidy, reveal.js, Slideous, S5, or DZSlides.         
     Word processor formats: Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML
     Ebooks: EPUB version 2 or 3, FictionBook2
     Documentation formats: DocBook, GNU TexInfo, Groff man pages, Haddock markup
     Outline formats: OPML
     TeX formats: LaTeX, ConTeXt, LaTeX Beamer slides
     PDF via LaTeX
     Lightweight markup formats: Markdown, reStructuredText, AsciiDoc, MediaWiki markup, Emacs Org-Mode, Textile
     Custom formats: custom writers can be written in lua.
</code></pre>

<p>pandoc支持多种格式的转换，可以直接用命令行由markdown转换为pdf。</p>

<pre><code>    $ pandoc demo.md -o demo.pdf
</code></pre>

<p>虽然这个命令表面上是直接转换，但实际还是通过先转换为LaTeX格式，再转为pdf的。  <br/>
这个命令对我们没有实际意义。因为无法加载样式，也无法解析中文。实用情况下还是
需要将文档转换为html或者LaTeX文件格式，通过html模板或者LaTeX的tex模板进行样式定制。</p>

<p><strong>LaTeX（Donald E. Knuth（高德纳）发明的）是一个科技出版界常用的格式。</strong></p>

<h3>pandoc安装</h3>

<h4>第一步，安装pandoc</h4>

<pre><code>    $ sudo apt-get install pandoc        
</code></pre>

<h4>第二步，安装texlive</h4>

<pre><code>    $ sudo apt-get install texlive-xetex texlive-latex-recommended texlive-latex-extra      
</code></pre>

<p>TexLive是LaTeX的工具集，由于转换pdf必须先转换成LaTeX。</p>

<h4>第三步，安装中文字体</h4>

<pre><code>    $ sudo apt-get install ttf-arphic-gbsn00lp ttf-arphic-ukai ttf-wqy-microhei ttf-wqy-zenhei        
</code></pre>

<p>本机必须安装有中文字体，否则无法正确的转换中文。</p>

<h4>第四步，安装<a href="http://fletcherpenney.net/multimarkdown/install/#linux">multimarkdown</a></h4>

<pre><code>    git clone git://github.com/fletcher/peg-multimarkdown.git
</code></pre>

<p>下载后是一个文件夹，cd进去后执行make命令即可。<br/>
用于将多个md文件一起进行转化为一个pdf文件。</p>

<h3>怎么使用？</h3>

<h4>示例</h4>

<p><a href="http://johnmacfarlane.net/pandoc/demos.html">官方网站</a></p>

<pre><code>    pandoc -N --template=mytemplate.tex --variable version=1.9 SLIDES.md --latex-engine=xelatex --toc -o example14.pdf
</code></pre>

<p>示例页里还有很多别的例子，其中将markdown文件转换成网页的sldes非常吸引人</p>

<pre><code>    pandoc -s –mathml -i -t dzslides SLIDES -o example14a.html
    pandoc -s –webtex -i -t slidy SLIDES -o example14b.html
    pandoc -s –webtex -t -t s5 SLIDES -o example14c.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github+octopress创建自己的博客]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/03/25/first-blog/"/>
    <updated>2013-03-25T15:43:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/03/25/first-blog</id>
    <content type="html"><![CDATA[<h3>添加SSH公钥</h3>

<p><code>$ cd ~/.ssh</code>  <br/>
<code>$ ssh-keygen -t rsa -C "your_email@example.com"</code>  <br/>
  将id_rsa.pub文件中的公钥copy到github上  <br/>
<code>$ ssh -T git@github.com #测试是否通过。</code></p>

<h3>新建仓库</h3>

<p> 在github上新建一个仓库，命名为 yourname.github.com</p>

<h3>本地安装octopress</h3>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress #下载octopress
$ cd octopress
$ bundle install 
$ rake install #安装默认主题
</code></pre>

<h3>配置</h3>

<p>编辑_config.yml文件配置博客名，扉页等  <br/>
编辑config.rb文件配置css，图片路径等</p>

<h3>编辑，上传</h3>

<p><code>$ rake new_post["my first blog"] #新建blog</code> <br/>
创建以后会在/source/_post目录下创建一个时间戳开头的文件，编辑这个文件撰写博客.
如果无法执行可以先输入：  <br/>
<code>$ alias rake="noglob rake"</code></p>

<p><code>$ rake setup_github_pages  #配置本地与github连接</code> <br/>
根据提示操作即可</p>

<p><code>$ rake generate #项目静态化</code>   <br/>
将配置修改，和编辑过的内容导入public中，window下控制台编码默认为GBK，需要在cmd下使用命令：
<code>chcp 65001</code>将控制台代码格式转为utf-8</p>

<p><code>$ rake preview #预览</code>   <br/>
可以使用http://localhost:4000预览</p>

<p><code>$ rake deploy #上传</code></p>
]]></content>
  </entry>
  
</feed>
