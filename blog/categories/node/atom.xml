<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-02-07T17:23:05+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node学习笔记一]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/02/07/node-note-1/"/>
    <updated>2014-02-07T16:16:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/02/07/node-note-1</id>
    <content type="html"><![CDATA[<h3>使用 supervisor</h3>

<p> Node.js 只有在第一次引用到某部份时才会去解析脚 本文件,以后都会直接访问内存,避免重复载入,但是在开发调试时很不方便，可以使用小工具 supervisor 在文件发生变化时自动重新加载。</p>

<pre><code>$ npm install -g supervisor
</code></pre>

<p>安装完成后使用命令</p>

<pre><code>supervisor app.js
</code></pre>

<p>这样就可以了，由于该命令比较长，建议设置一个alias。</p>

<h3>模块</h3>

<p>模块是 Node.js 应用程序的基本组成部分,文件和模块是一一对应的。换言之,一个 Node.js 文件就是一个模块<br/>
应用模块使用两个关键字：<code>require</code>和<code>exports</code>。如下例：在app.js中引入并使用content.js。</p>

<p>app.js</p>

<pre><code>content = require('./content')
console.log(content.text);
content.log();
</code></pre>

<p>content.js</p>

<pre><code>exports.text = "Hello World!";
exports.log = function(){
  console.log("Success!");
} 
</code></pre>

<p>最后执行<code>node app.js</code>的结果是</p>

<pre><code>Hello World!
Success!
</code></pre>
]]></content>
  </entry>
  
</feed>
