<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-07-21T09:43:05+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails中间层解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an/"/>
    <updated>2013-12-20T15:34:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h3>调用API构建前端</h3>

<p>一般情况下，rails应用都是从数据库进行数据获取，而采用API调用的话，就不再需要model层了，只需要在控制器中用http库进行接口调用就可以了，大大简化了结构。
example:</p>

<pre><code>require 'open-uri'
require 'json'
require 'net/http'
def index  
  uri = URI("http://test.csdn.net/api/format/json")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["contents"]
end
</code></pre>

<h3>问题：多个API调用时的阻塞问题</h3>

<pre><code>def index  
  uri_one = URI("http://test.csdn.net/api/1/format/json")
  uri_two = URI("http://test.csdn.net/api/2/format/json")
  uri_three = URI("http://test.csdn.net/api/3/format/json")
  ......
  req_one = Net::HTTP.get(uri_one)
  req_two = Net::HTTP.get(uri_two)
  req_three = Net::HTTP.get(uri_three)
  ......
  @slides = JSON.parse(req)["data"]["contents"]
  ......
end
</code></pre>

<p>如果有10个API调用，每个<code>Net::HTTP.get(uri)</code>通信耗时30ms，那么就是300ms的时间。</p>

<h3>解决方案一：多线程处理</h3>

<pre><code>threads = []
threads &lt;&lt; Thread.new {@req_one = Net::HTTP.get(uri_one)}
threads &lt;&lt; Thread.new {@req_two = Net::HTTP.get(uri_two)}
threads &lt;&lt; Thread.new {@req_three = Net::HTTP.get(uri_three)}
......
threads.each { |t| t.join }
data = JSON.parse(@req_one)["data"]
</code></pre>

<p>多进程是抢占资源的一个模型，并非并行计算，比如线程1执行一个http通信后中间有30ms的I/O时间，那么这段阻塞的时间就会被线程2抢占。
开启多线程并行处理，可以很大程度上提高处理速度。但是有两个问题：
一、开多个线程以及线程间的切换造成资源开销增加，实际上降低了应用的吞吐能力。
二、由于Ruby存在GIL (Global Interpreter Lock)，并不能真正利用多线程进行并行计算。（JRuby 去除了 GIL，是真正意义的多线程，既能应付 IO Block，也能充分利用多核 CPU 加快整体运算速度。）</p>

<h3>解决方案二：采用异步模型处理</h3>

<h4>Ruby的异步解决方案：Eventmachine</h4>

<p>在Gemfile中添加：</p>

<pre><code>gem 'eventmachine'
gem 'em-http-request', :require =&gt; 'em-http'
</code></pre>

<p>控制器中的代码：</p>

<pre><code>EventMachine.run {
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  http.errback { 
    render :text "接口连接失败"; 
    EM.stop 
  }
  http.callback {
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    @page_count = JSON.parse(req)["data"]["count"].to_i/18+1
    EM.stop
  }
}
</code></pre>

<p>这种方式不仅解决了阻塞问题，而且可以有效的提高系统的吞吐能力。但带来的问题是代码量增加，复杂逻辑下代码的复杂度成倍增加，不利于开发和维护。</p>

<h4>引入纤程（Fiber）,用同步代码编写异步程序</h4>

<p>在Gemfile中添加<code>gem 'em-synchrony'</code>。
控制器代码：</p>

<pre><code>EM.synchrony do
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  req = http.response
  @slides = JSON.parse(req)["data"]["list"]
  EM.stop
end
</code></pre>

<p>多个接口调用实例：</p>

<pre><code>require "em-synchrony"
require "em-synchrony/em-http"
require "em-synchrony/fiber_iterator"
EM.synchrony do
  concurrency = 2
  urls = ['http://url.1.com', 'http://url2.com']
  results = []
  EM::Synchrony::FiberIterator.new(urls, concurrency).each do |url|
    res = EventMachine::HttpRequest.new(url).get
    results &lt;&lt; res.response
  end
  puts results # all completed requests
  EventMachine.stop
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails常用gem]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/03/31/my-third-blog/"/>
    <updated>2013-03-31T21:00:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/03/31/my-third-blog</id>
    <content type="html"><![CDATA[<h4>总结一下最近rails项目用到的gems</h4>

<p><a href="http://rubygems.org">rubygems官方网站</a>  <br/>
<a href="https://www.ruby-toolbox.com/">最流行的rubygems排名</a></p>

<h3>测试：</h3>

<p><a href="https://github.com/rspec/rspec-rails">rspec-rails</a><br/>
<a href="https://github.com/pry/pry">pry</a>  (命令行断点调试工具)</p>

<h3>前端 ：</h3>

<p><a href="https://github.com/Compass/compass-rails">compass-rails</a><br/>
<a href="https://github.com/kristianmandrup/masonry-rails">masonry-rails</a> （瀑布流）</p>

<h3>部署：</h3>

<p><a href="http://www.seeyon.com/news/4062.html">unicorn</a>     <br/>
<a href="https://github.com/FooBarWidget/passenger">passenger</a></p>

<h3>web service接口：</h3>

<p><a href="https://github.com/intridea/grape">grape</a></p>

<h3>数据库支持:</h3>

<p><a href="https://github.com/brianmario/mysql2">mysql2</a> mysql数据库支持 <br/>
<a href="https://github.com/mongoid/mongoid">mongoid</a> mongodb数据库支持</p>

<h3>后台队列:</h3>

<p><a href="https://github.com/resque/resque">resque</a></p>

<h3>文件上传：</h3>

<p><a href="https://github.com/jnicklas/carrierwave/">Carrierwave</a></p>

<h3>分页：</h3>

<p><a href="https://github.com/mislav/will_paginate">will_paginate</a> <br/>
<a href="https://github.com/amatsuda/kaminari">Kaminari</a></p>

<h3>用户系统：</h3>

<p><a href="https://github.com/plataformatec/devise">devise</a> 全面的登陆注册系统    <br/>
<a href="https://github.com/ryanb/cancan">cancan</a> 用户权限设置  <br/>
<a href="https://github.com/codahale/bcrypt-ruby">bcrypt-ruby</a> 用于加密</p>

<h3>富文本编辑：</h3>

<p><a href="https://github.com/Macrow/rails_kindeditor">rails_kindeditor</a></p>

<h3>Bootstrape:</h3>

<p><a href="https://github.com/seyhunak/twitter-bootstrap-rails">twitter-bootstrap-rails</a> <br/>
<a href="https://github.com/thomas-mcdonald/bootstrap-sass">bootstrap-sass</a></p>

<h3>图片处理：</h3>

<p><a href="https://github.com/minimagick/minimagick">mini_magick</a>  （需要安装imagemagick）</p>

<h3>memcache:</h3>

<p><a href="https://github.com/mperham/dalli">dalli</a></p>

<h3>JS数据引用</h3>

<p><a href="https://github.com/gazay/gon">gon</a> #可以在JS中使用服务端数据</p>
]]></content>
  </entry>
  
</feed>
