<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2013-08-30T10:45:38+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysqldump及用户权限设置]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/08/30/mysqldump/"/>
    <updated>2013-08-30T10:32:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/08/30/mysqldump</id>
    <content type="html"><![CDATA[<h3>新建用户</h3>

<p>我们查看mysql的root用户的port字段，其中有值为&#8217;%&#8217;的，代表除本地外的其他地址的链接，但是port = &#8216;%&#8217;的行在root用户组中排在最下面，因此远程链接数据库就会因权限不足而失败。
我们选择新建一个用户来进行远程数据备份：</p>

<pre><code>mysql&gt; insert into mysql.user(Host,User,Password) values("%","yourname",password("1234"));
</code></pre>

<p>这样就创建了一个新用户，然后是给用户授权：</p>

<pre><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'yourname'@'%'IDENTIFIED BY '1234';
</code></pre>

<p>刷新用户权限：</p>

<pre><code>mysql&gt; flush privileges;
</code></pre>

<h3>mysqldump</h3>

<p>用于将远程数据库导出到本地：</p>

<pre><code>mysqldump -h192.125.117.89 -uyourname -p1234 databasename &gt; /home/xieyu/databasename.sql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程五：编写代码的代码]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five/"/>
    <updated>2013-07-14T21:06:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five</id>
    <content type="html"><![CDATA[<h2>Kernel#eval</h2>

<p>kernel#eval会直接 执行字符串中的代码，并返回执行结果，和javascript中的eval()一样。</p>

<h2>钩子方法</h2>

<h3>Class#inherited</h3>

<p>当类被继承时，调用该方法，平时它什么也不做。，可以通过覆写它来形成类似回调函数的用法。
example:</p>

<pre><code>class MyClass                         #inherited是Class的一个实例方法，对于一个特定的类，则是它的类方法。
    def self.inherited(param)         #注意inherited方法需要一个参数，参数是继承者的类名
        p "lala"
    end
end

MySonClass &lt; MyClass; end       #=&gt;"lala"
</code></pre>

<h3>更多钩子方法</h3>

<p>Class#inherited是最常用的，还有其他一些：
Module#includeed
Module#method_added
Module#method_removed
Module#method_undefined</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程四：类定义]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth/"/>
    <updated>2013-07-01T22:47:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth</id>
    <content type="html"><![CDATA[<h2>类定义</h2>

<p>在ruby中，类定义和其他语言有所不同，当使用class关键字时，并非是在指定对象未来的行为方式，实际上是在运行代码。
类定义会返回最后一条语句的值。
每当通过class关键字打开一个类，这个类就成为当前类。在类定义中，当前对象self就是正在定义的类。</p>

<h3>类实例变量</h3>

<pre><code>class MyClass
    @var = 0
    def self.method_one
        @var = 1
    end

    def method_two
        @var = 2
    end

    def method_three
        @var = 3
    end

    class&lt;&lt;self 
        def method_four
            x=4
        end

        def method_five
            x=5
        end
    end
end

obj = MyClass.new
obj.method_two           #=&gt;2
obj.method_threee        #=&gt;3
MyClass.method_one       #=&gt;1
类实例变量只有类可以调用它，而类的实例则不行，实例变量则正好相反。
class&lt;&lt;self 用于一次性定义多个类方法
</code></pre>

<h3>类变量</h3>

<p>以@@开头，它们可以被子类或者类的实例所使用
后定义的同名类变量会覆盖之前的，不论它的位置，example：</p>

<pre><code>@@v = 1
class A
  @@v = 2
end
@@v                        #=&gt;2
</code></pre>

<h3>扁平化作用域</h3>

<p>使用class, def,  module关键字会产生作用域门.但是如果想在一个模块中共享变量,就需要用到扁平化作用域.
使用ClassName = Class.new , ModuleName = module.new , define_method: method_name do &#8230;.end
example:</p>

<pre><code>    my_var = "success"
    MyClass = Class.new do
      puts "#{my_var} is get"
      define_method :printvar do
        puts "#{my_var} is in the method"
      end
    end
    MyClass.new.printvar
</code></pre>

<h3>单件方法与类方法</h3>

<p>Ruby允许给单个对象添加方法，这就是单件方法。example:</p>

<pre><code>str = "hahaha"
def str.title?
    self.upcase == self
end
</code></pre>

<p>而类方法实际就是一种单件方法，因为类也是对象，它针对这个类生效。</p>

<h3>类宏</h3>

<p>Ruby对象没有属性，如果想要定义属性，就需要定义两个拟态方法，一个读方法和一个写方法。</p>

<pre><code>class MyClass
    def height=(val)
        @height = val
    end

    def height
        @height
    end
end
obj = MyClass.new
obj.height = "160cm"
obj.height     #=&gt;"160cm"

这样非常麻烦，我们可以使用module#attr_*系列方法，其中attr_reader()可以生成一个读方法；attr_writer()可以生成写方法；attr_accessor()则可以生成读写方法。
那么上面的例子就可以改写为：

class MyClass
    attr_accessor :height
end
</code></pre>

<h3>环绕别名</h3>

<p>从一个重新定义的方法中调用原始的，被重命名的版本。 三个步骤： 1. 通过alias 对原有方法定义一个别名 2. 覆写原有方法 3. 在该方法中调用别名方法 这样做的好处，可以改写原有方法，又不破坏原有功能 。</p>

<pre><code>    class String  
        alias :old_reverse :reverse
        def reverse 
            "x#{old_reverse}x"
        end
    end 
    "abc".reverse  =&gt;xcbax
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程三：代码块]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third/"/>
    <updated>2013-06-29T20:53:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third</id>
    <content type="html"><![CDATA[<h2>闭包</h2>

<p>块可以作为一个闭包.
example:</p>

<pre><code>def my_method
    x="Goodbye"
    yield("cruel")
end
x = "Hello"
my_method {|y| "#{x} , #{y} world"}   #=&gt;Hello, cruel world
</code></pre>

<p>块获得了局部绑定的变量x，并一直带着它。块并不能接受方法中定义的x=&#8221;Goodbye&#8221;</p>

<h2>作用域与作用域门</h2>

<p>程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：
类定义
模块定义
方法
它们分别用关键字class，module，def为标志每一个关键字都充当了一个作用域门。</p>

<h2>Proc类，proc，lambda , yield , &amp;操作符</h2>

<h3>将块转化为对象</h3>

<p>使用块需要分两步：1.把块的逻辑写好打包备用。2.调用块<br/>
块不是对象，如果想要存储一个块供以后执行，需要一个对象。<br/>
Ruby标准库提供Proc类，它接受一个块作为参数，从而将这个块转化为对象：</p>

<pre><code>inc = Proc.new { |x| x+1}
inc.call(2)                       #=&gt;3
</code></pre>

<p>而lambda ， proc 本质也是将块转化为Proc类的实例化对象</p>

<h3>lambda，proc的区别</h3>

<p>1.使用return关键字的时候，lambda从它本身返回，而proc则会在定义它的作用域中返回。</p>

<pre><code>def double(param)
    param.call*2
end
l=lambda {return 10}
double(l)                         #=&gt;20
p=proc {return 10}
double(p)                         #=&gt;报错LocalJumpError
</code></pre>

<p>2.参数数量
调用lambda的时候，如果参数数量不对则会报错，而proc会自动调整，忽略多余的，如果少了则会将其赋为nil</p>

<h3>&amp;操作符</h3>

<p>它可以实现：
1.把这个块传递给另一个方法
2.把一个块转化为proc,只需要去掉&amp;操作符即可。</p>

<p>example1：</p>

<pre><code>def math(a, b)
    yield(a , b)
end
def teach_math(a , b , &amp;block)
    puts math(a , b , &amp;black)
end
teach_math(2,3) {|x ,y| x*y}         #=&gt;6
</code></pre>

<p>example2:</p>

<pre><code>def test(&amp;block)
    block
end
t=test {|name| "Hello,#{name}"}
puts t.call("Tom")                         #=&gt;Hello , Tom
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_file]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-file/"/>
    <updated>2013-06-17T13:21:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-file</id>
    <content type="html"><![CDATA[<h3>检验存在</h3>

<pre><code>File.file? "test.txt"                  #检验文件存在性
File.exists? "test.txt"                #只检验存在性，无论是文件夹还是其他的文件类型
File.directory? "test.txt"             #检验文件夹存在性
</code></pre>

<h3>检验权限</h3>

<pre><code>File.readable?
File.writable?
File.executable?
File.owned?                         #文件是否属于当前用户组，windows下总是为true
</code></pre>

<h3>文件属性</h3>

<pre><code>File.stat                    # 文件的详细属性
&lt;File::Stat dev=0x700, ino=670451, mode=0100664, nlink=1, uid=1000, gid=1000, rdev=0x0, size=8, blksize=4096, blocks=8, atime=2013-06-05 09:37:38 +0800, mtime=2013-06-05 09:37:27 +0800, ctime=2013-06-05 09:37:27 +0800&gt;
</code></pre>

<p>atime ：最后读取的时间
mtime ：最后修改内容的时间
ctime ：最后修改的时间（包括修改权限等）</p>

<h3>文件列表</h3>

<pre><code>列出某路径下的文件列表
Dir.getwd                           #获取工作路径
Dir.chdir '/bin'                    #改变工作路径
Dir.mkdir 'haha'                    #创建工作路径
Dir.entries "/"
Dir.foreach("/") do |file|
  puts file
end
</code></pre>

<h3>文件写入</h3>

<pre><code>‘w’：写模式，覆盖写入
‘a’：附加模式，不会覆盖原有内容
open("test.txt" , "a") do |f|
  f.puts("aaaaaaaa")
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby的HTTP类库]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http/"/>
    <updated>2013-06-17T13:19:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http</id>
    <content type="html"><![CDATA[<h2>HTTP</h2>

<h3>NET::HTTP.get</h3>

<pre><code>    require "net/http"
    Net::HTTP.get('example.com', '/index.html')      # =&gt; String

    uri = URI('http://example.com/index.html?count=10')
    Net::HTTP.get(uri)        # =&gt; String
</code></pre>

<p>可以使用get方法进行下载:</p>

<pre><code>    File.open("test.jpg" , "w") do |f|
        f.write Net::HTTP.get(uri) 
    end
</code></pre>

<p>接收动态参数:</p>

<pre><code>    uri = URI('http://bbs.csdn.net/forums/ROR')
    params = { :limit =&gt; 10, :page =&gt; 3 }
    uri.query = URI.encode_www_form(params)
    res = Net::HTTP.get_response(uri)                         #get_response()方返回一个对象
    puts res.body if res.is_a?(Net::HTTPSuccess)
</code></pre>

<h2>URI</h2>

<h3>Basic</h3>

<pre><code>    require 'uri'
    uri = URI("http://foo.com/posts?id=30&amp;limit=5#time=1305298413")
    #=&gt; #&lt;URI::HTTP:0x00000000b14880
          URL:http://foo.com/posts?id=30&amp;limit=5#time=1305298413&gt;
    uri.scheme                                       #=&gt; "http"
    uri.host                                            #=&gt; "foo.com"
    uri.path                                            #=&gt; "/posts"
    uri.query                                          #=&gt; "id=30&amp;limit=5"
    uri.fragment                                     #=&gt; "time=1305298413"
    uri.to_s                                             #=&gt; "http://foo.com/posts?id=30&amp;limit=5#time=1305298413"
</code></pre>

<h3>Joins URIs.</h3>

<pre><code>    require 'uri'
    p URI.join("http://example.com/","main.rbx")                 # =&gt; #&lt; URL:http://localhost/main.rbx&gt;
    p URI.join('http://example.com', 'foo')                            # =&gt; #&lt; URL:http://example.com/foo&gt;
    p URI.join('http://example.com', '/foo', '/bar')                 # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo', 'bar')                  # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo/', 'bar')                 # =&gt; #&lt; URL:http://example.com/foo/bar&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_array类常用方法]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-array/"/>
    <updated>2013-06-17T13:18:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-array</id>
    <content type="html"><![CDATA[<h2>取值</h2>

<h3>索引取值</h3>

<pre><code>    arr  = [1, 2, 3, 4, 5]
    arr[0]  = 1
    arr.at(0) = 1
</code></pre>

<h3>take &amp; drop</h3>

<pre><code>    arr.take 3              #=&gt;[1, 2, 3]
    arr.drop 3              #=&gt;[4, 5]
</code></pre>

<h2>插值</h2>

<h3>pop, push &amp;&amp; shift , unshift</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.push(5)              #=&gt; [1, 2, 3, 4, 5]
    arr &lt;&lt; 6                  #=&gt; [1, 2, 3, 4, 5, 6]
    arr.pop                    #=&gt; 6
    arr                          #=&gt; [1, 2, 3, 4, 5]
    arr.unshift 0             #=&gt;[0, 1, 2, 3, 4, 5]
    arr.shift                   #=&gt; 0 
    arr                           #=&gt;[1, 2, 3, 4, 5]
    arr.push [1, 2, 3]      #=&gt;[1, 2, 3, 4, 5, [1, 2, 3] ]
</code></pre>

<h3>insert</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.insert(3 , 5)        #=&gt;[1, 2, 3, 5, 4]              #第一个参是索引值
</code></pre>

<h2>删除</h2>

<h3>delete</h3>

<pre><code>    arr = [1, 2, 2, 3, 4]
    arr.delete 2            #=&gt;2
    arr                         #=&gt;[1, 3, 4]                       #delete根据实际值删除全部
    arr.delete_at 2        #=&gt;4 
    arr                         #=&gt;[1, 3]                           #delete_at根据索引值删除
</code></pre>

<h3>compact(去nil)</h3>

<pre><code>    arr  = [1, nil, 2 , nil, 3 , 4]
    arr.compact             #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, nil, 2 , nil, 3 , 4]
    arr.compact!            #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, 2, 3, 4]
                                  #compact: v, adj 紧凑的,使紧凑
</code></pre>

<h3>uniq(去重)</h3>

<pre><code>    arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
    arr.uniq                  #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]
    arr.uniq!
</code></pre>

<h2>迭代</h2>

<h3>each</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.each {|a| puts a+1}               执行结果:1234 #=&gt;[1, 2, 3, 4]   #返回原数组
</code></pre>

<h3>map&amp;map!</h3>

<pre><code>    arr.map {|a| a+1}                            #=&gt;[2, 3, 4, 5]           # 返回block处理过后的结果
    arr.map! {|a| a+1}                          #=&gt;[2, 3, 4, 5]         # 返回block处理过后的结果,并改变原数组
</code></pre>

<h2>选择</h2>

<h3>不改变原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.select { |a| a &gt; 3 }     #=&gt; [4, 5, 6]
    arr.reject { |a| a &lt; 3 }     #=&gt; [3, 4, 5, 6]                     #可以理解为!select
    arr.drop_while { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                          #=&gt; [1, 2, 3, 4, 5, 6]       
</code></pre>

<h3>修改原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.delete_if { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                         #=&gt; [4, 5, 6]

    arr = [1, 2, 3, 4, 5, 6]
    arr.keep_if { |a| a &lt; 4 } #=&gt; [1, 2, 3]
    arr                       #=&gt; [1, 2, 3]
</code></pre>

<h2>连接</h2>

<h2>判断</h2>

<h3>存在性</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.include? 1                 #=&gt;true
</code></pre>

<h3>为空?</h3>

<pre><code>    arr.empty?                     #=&gt;false
</code></pre>

<h3>相等</h3>

<pre><code>    a=[1, 2]
    b=[1, 2]
    a.eql? b                          #=&gt;true 
    a.equal? b                       #=&gt;false    equal?只有当二者是同一个对象的时候才会为true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_string]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-string/"/>
    <updated>2013-06-17T13:10:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-string</id>
    <content type="html"><![CDATA[<h2>字符串连接</h2>

<pre><code>+
concat()
&lt;&lt;                              #concat()的参数为整数则会转换成对应的字符串。
</code></pre>

<h2>正则匹配与替换</h2>

<h3>match , =~ , !~ 匹配</h3>

<pre><code>"name".match(/a/)         #=&gt;true
"name" =~ /a/               #=&gt;1                       #肯定匹配
"name" =~ /b/               #=&gt;nil
"name"  !~ /b/                #=&gt;false                 #否定匹配
</code></pre>

<h3>delete() &amp; delete!()  删除</h3>

<pre><code>example:
    str="ababaaaaaccccb"
    str.delete("ab")  #=&gt;"cccc"        #删除所有包含的字符串，而不是删除字符串组合
    str.delete!("ab")      #=&gt;"cccc"
    str #=&gt;"cccc"
    str.delete!("ab")      #=&gt;"nil"
    str #=&gt;"cccc"
</code></pre>

<h3>sub，gsub &amp;sub!,gsub! 替换</h3>

<pre><code>"abcdefaaa".sub(/a/ , "x")  #=&gt; "xbcdeaaa"
"abcdefaaa".sub(/a/ , "x")  #=&gt; "xbcdexxx"
第一个参数可以是正则，也可是字符串
</code></pre>

<h3>slice()&amp;slice!()</h3>

<pre><code>参数可以是索引值，索引范围(range) ， 正则 ， 字符串。返回匹配的字符串。
"abcdaaa".slice(1) #=&gt;"b"
"abcdaaa".slice(1..3) #=&gt; "bcd"
"abcdaaa".slice(-3..-1) #=&gt; "aaa"
"abcdaaa".slice(/a\w{3}a/) #=&gt; "abcda"
"abcdaaa".slice("abc") #=&gt; "abc"

slice!()会对原字符串进行切割，切掉匹配参数的部分
str ="abcdaaa"
str.slice!(0)
str="bcdaaa"
</code></pre>

<p>scan(regexp)
返回一个数组，所有匹配的字符串</p>

<h3>split</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[离职总结]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/18/something-known/"/>
    <updated>2013-05-18T15:44:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/18/something-known</id>
    <content type="html"><![CDATA[<h3>互联网方向和企业服务方向存在根本性的不同</h3>

<p>  现在OA,ERP系统等企业级服务等都在向web端，乃至移动端靠近，看起来好像和互联网服务区别越来越小，但是对于外包团队来说，区别是本质上的。</p>

<p>  互联网产品面向普罗大众，要求是使用简单，可接受度高，个性化。而且互联网方向主要客户来自创业者以及传统行业面向用户渠道的互联网化。业务逻辑相对简单，但对品质的要求是比较高的。同样，这部分客户的资金实力往往比较弱。因此如果公司面向互联网渠道提供服务，我认为应该在设计，咨询，技术支持等方面入手。消耗的时间相对少，同时可以做多个客户，以量取胜。不要轻易尝试承接整体工程。风险大，周期长，利润低，除非有渠道可以做政府的项目，或者客户需求和自有产品对的上号。</p>

<p>  而需要企业级服务的企业往往规模庞大，业务逻辑相当复杂，每个项目的价格都会比较高，赚头足，但是对外包企业的要求也比较高：首先，要有自己的基础产品，开发要基于基础产品来做，而不是从头开始，其次人手必须充足，这种项目往往不是2,3个精英程序员就可以搞定的，因为有大量的基础的，低技术含量的工作需要做，做这些事情使用高级程序员是非常不划算的，因此需要将功能拆分，通过使用大量的水平一般，薪水低廉的程序员来做，一方面需求使然，一方面控制风险。我认为这也是做这种业务的企业多使用.net，jsp的原因：容易招到大量的中低水平的程序员。</p>

<h3>公司的问题</h3>

<h4>没有根据自身特点选准方向</h4>

<p>1.外包方面的主管是设计外包出身，那么在设计人员招聘，设计咨询，忽悠客户方面是内行，并且有多年为运营商做前端，设计服务的经验。但是对技术评估方面并不在行，也没法在技术方面和客户进行沟通。</p>

<p>2.技术主管虽然先后就职于百度，人人，编程能力，学习能力，沟通能力都非常强，但是经验是在互联网方向，对于企业级的服务并不在行，而且他本人也对外包毫无兴趣。</p>

<p>因此很明显了，实际公司是无力组建一个面向企业的技术外包团队的，而面向互联网，也仅仅是可以做，但做不好，因为打心眼里就不想做。技术方面如果找不到适合带外包团队的人，那就干脆不要做，专心做产品去，外包全部由设计来支持，技术方面最多做一些咨询服务就好了。可偏偏公司要去接互联网前后台乃至app全包的项目。</p>

<h4>明明是小公司，偏偏有大公司的毛病</h4>

<p>就是一个创业型的公司，虽然有母公司的大力支持，但是实力仍然有限，但是信息隔离，缺乏激情，管理僵化，事不关己，高高挂起的毛病还是通过领导人从母公司带了过来。</p>

<h4>CEO来自投资方</h4>

<p>由于公司是香港集团的全资子公司，CEO是该集团的一位经理，但他同时管理多家控股公司，其他公司和母公司业务比较贴近，做硬件方面，更多的是资本，渠道的东西，这方面他很了解，而我们这边做软件，设计则更多是看人。一方面CEO并非所有精力都在这边，一方面他对设计和软件业务并不了解。而现在的情况是一个本该是政委，或者监军的人坐在了主帅的位置上。虽然这不是他的错，他也尽自己最大的努力放权给更懂业务的主管们，但毕竟身在那个位置，很多决策需要他来定。不可避免的会出现外行领导内行的情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[%Q, %q, %W, %w, %x, %r, %s]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/12/percent-w-and-so-on/"/>
    <updated>2013-05-12T23:29:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/12/percent-w-and-so-on</id>
    <content type="html"><![CDATA[<h3>%Q</h3>

<p>遇到引号嵌套的时候我们往往需要使用反斜线来实现转义，使用%Q(&#8230;)可以实现同样的效果，最终输出字符串，并且支持使用#{}操作变量</p>

<pre><code>&gt;&gt; %Q(Joe said: "Frank said: "#{what_frank_said}"")
=&gt; "Joe said: "Frank said: "Hello!"""
</code></pre>

<p>The parenthesis “(…)” can be replaced with any other non-alphanumeric characters and non-printing characters (pairs), so the following commands are equivalent:</p>

<pre><code>&gt;&gt; %Q!Joe said: "Frank said: "#{what_frank_said}""!
&gt;&gt; %Q[Joe said: "Frank said: "#{what_frank_said}""]
&gt;&gt; %Q+Joe said: "Frank said: "#{what_frank_said}""+
</code></pre>

<p>You can use also:</p>

<pre><code>&gt;&gt; %/Joe said: "Frank said: "#{what_frank_said}""/
=&gt; "Joe said: "Frank said: "Hello!"""
</code></pre>

<h3>%q</h3>

<p>%q和%Q大同小异，只是用于单引号，因此无法支持变量</p>

<pre><code>&gt;&gt; %q(Joe said: 'Frank said: '#{what_frank_said} ' ')
=&gt; "Joe said: 'Frank said: '\#{what_frank_said} ' '"
</code></pre>

<h3>%W</h3>

<p>转化为数组并支持变量</p>

<pre><code>&gt;&gt; %W(#{foo} Bar Bar\ with\ space)
=&gt; ["Foo", "Bar", "Bar with space"]
</code></pre>

<h3>%w</h3>

<p>转化为数组，但不支持变量</p>

<pre><code>&gt;&gt; %w(#{foo} Bar Bar\ with\ space)
=&gt; ["\#{foo}", "Bar", "Bar with space"]
</code></pre>

<h3>%x</h3>

<p>Uses the ` method and returns the standard output of running the command in a subshell.The syntax is similar to %Q.</p>

<pre><code>&gt;&gt; %x(echo foo:#{foo})
=&gt; "foo:Foo\n"
</code></pre>

<h3>%r</h3>

<p>转化为正则表达式</p>

<pre><code>&gt;&gt; %r(/home/#{foo})
=&gt; "/\\/home\\/Foo/"
</code></pre>

<h3>%s</h3>

<p>转化为symbols.It’s not subject to expression substitution or escape sequences.</p>

<pre><code>&gt;&gt; %s(foo)
=&gt; :foo
&gt;&gt; %s(foo bar)
=&gt; :"foo bar"
&gt;&gt; %s(#{foo} bar)
=&gt; :"\#{foo} bar"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby中一些特别的数据类型]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/07/ruby-dataclass/"/>
    <updated>2013-05-07T21:03:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/07/ruby-dataclass</id>
    <content type="html"><![CDATA[<h3>Range</h3>

<p>example:</p>

<pre><code>    1..9
    (1..9).to_a #=&gt;[1,2,3,4,5,6,7,8,9]
    a=["aa","bb","cc","dd"]
    a[0..2]=["aa","bb","cc"]
    a..c
    (a..c).to_a #=&gt;[a,b,c]
    (1..9) ===5           #=&gt; true  #可以用做间隔测试
</code></pre>

<h3>Symbol</h3>

<p>Symbol是ruby特有的一种数据类型，每一个变量都对应这一个同名Symbol值，每个Symbol对应一个内部id，因此查询速度很快，常用于作为键名。</p>

<pre><code>    1.9以前版本只支持 :name =&gt; "xieyu"
    新版本同时支持 name:"xieyu"
</code></pre>

<h3>block</h3>

<p>数组和Range可以通过block来进行迭代
example：</p>

<pre><code>    (1..5).each{ |i| puts 2*i}
    #=&gt;2
    #=&gt;4
    #=&gt;6
    #=&gt;8
    #=&gt;10
    花括号可以使用do ... end来代替
    (1..5).each do |i|
        2*i
    end
</code></pre>

<h3>Hash</h3>

<p>Hash本质是一个数组，但是它的索引值不局限于数字，它的索引可以是任何对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程笔记一]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/06/metaprogramming-note1/"/>
    <updated>2013-05-06T16:25:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/06/metaprogramming-note1</id>
    <content type="html"><![CDATA[<h3>打开类</h3>

<p>通过</p>

<pre><code>class String
  def to_alphanumeric
    gsub /[^\w\s]/,''
  end
end
</code></pre>

<p>可以直接打开已有的类并给其添加方法，class关键字的核心任务是把你带入到类的上下文中，让你可以定义其中的方法。 <br/>
如果方法名重合，那么会覆盖原来的方法，这称为“猴子补丁（Moneypatch）”。</p>

<h3>对象和方法</h3>

<pre><code>class MyClass
  def my_method
    @v=1
  end
end
obj = MyClass.new

obj #=&gt; &lt;MyClass:0x007f8e42830838 @v=1&gt;  #obj作为一个实例对象包含一个实例变量@v和一个类MyClss
obj.class  #=&gt;MyClass
obj.my_method
obj.instance_variables #=&gt;[:@v]

obj.methods.grep(/my/)  #=&gt;[:my_method] 
MyClass.instance_methods(false) #=&gt;[:my_method] 
MyClass.methods.grep(/my/) #=&gt;[]       
#通过对比可以看出，my_method是MyClass的一个实例方法，只有当MyClass实例化后才能调用，MyClass类本身并没有这个方法。

MyClass.class #=&gt;Class
#类也是对象，它包含一个叫Class的类。
</code></pre>

<h3>类与模块</h3>

<pre><code>Class.superclass #=&gt;Module
#Class的超类是Module，Class实际就是一个增加了new(),allocate(),superclass()的Module，Class是Module的子类.
#所有的类都最终继承于Object，Object继承于BasicObject
</code></pre>

<p>以Rake为例：</p>

<pre><code>module Rake
  class Task
   #...
   #使用Rake::Task来拓展命名空间
</code></pre>

<p>关于常量：</p>

<pre><code>module MyModule
  MyContent = "aaa"
  class MyClass
    MyContent = "bbb"
  end
end      
#对于常量MyContent,也可以使用MyModule::MyClass::MyContent这样的格式来引用
</code></pre>

<h3>Kernel模块</h3>

<p>Object引用了Kernel模块，因此Kernel模块中的方法可以对任何对象使用。那么可以用类似打开类的方式给Kernel增加方法（称为“内核方法”）</p>

<pre><code>module Kernel
  def my_method
  end
end
</code></pre>

<h3>self</h3>

<pre><code>class MyClass
  def testing_self
    @var = 10
    self.my_method()
  end
  def my_method
    @var = @var+1
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用前端资源整理]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/24/firststage/"/>
    <updated>2013-04-24T16:24:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/24/firststage</id>
    <content type="html"><![CDATA[<h3>整体解决方案</h3>

<h4><a href="http://twitter.github.io/bootstrap/">Bootstrap：</a></h4>

<p>大而全的前端框架，适合原型搭建。  <br/>
<a href="http://www.bootcss.com/">中文文档1</a>
<a href="http://wrongwaycn.github.io/bootstrap/docs/">中文文档2</a></p>

<h4><a href="http://www.keqie.com/">渴切</a></h4>

<p>有很多适合中国特色的解决方案。</p>

<h3>兼容性问题</h3>

<h4><a href="https://github.com/sofish/Alice">Alice:</a></h4>

<p>支付宝团队开源的兼容性问题解决方案   <br/>
<a href="https://github.com/sofish/Alice">github访问</a></p>

<h4><a href="http://css3pie.com/">PIE：</a></h4>

<p>CSS3在IE下的兼容</p>

<h3>响应式设计</h3>

<h3>生产力工具</h3>

<h4><a href="http://sass-lang.com/">scss</a></h4>

<p>基于ruby</p>

<h4><a href="http://www.lesscss.net/">less</a></h4>

<p>基于js</p>

<h4><a href="http://compass-style.org/">compass</a></h4>

<p>基于scss</p>

<h3>常用效果</h3>

<h4>表单前端验证：</h4>

<p><a href="http://livevalidation.com/">Livevalidation</a>
<a href="http://www.aqee.net/docs/livevalidation/examples.html">中文文档</a></p>

<h4>幻灯片：</h4>

<h4>表单美化与一致性：</h4>

<p><a href="https://github.com/damirfoy/iCheck/">iCheck</a>:单选框与复选框的美化与一致性。</p>

<h4>图表控件：</h4>

<p><a href="http://www.bootcss.com/p/chart.js/docs/">Chart.js</a>:基于HTML5，通过ExplorerCanvas 可向下支持低版本IE，但只支持6种基本图表。</p>

<h4>动画效果：</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记二：核心语法（数组）]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/24/javascript-array/"/>
    <updated>2013-04-24T14:11:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/24/javascript-array</id>
    <content type="html"><![CDATA[<h3>创建数组</h3>

<h4>字面量直接创建</h4>

<p>example:</p>

<pre><code> var arr=[1,2,3,4,5];
</code></pre>

<h4>使用构造函数array创建</h4>

<p>example:</p>

<pre><code> var arr=new array()  // 创建一个空数组
 var arr=new array(10)  // 创建一个长度为10 的数组
 var arr=new array(1，2，3)  // 相当于字面量直接创建
</code></pre>

<h3>数组方法</h3>

<h4>join()</h4>

<p>将数组转化为字符串序列，参数为分隔符</p>

<h4>reverse()</h4>

<p>将原数组倒序排列</p>

<h4>sort()</h4>

<p>根据字母表排序</p>

<h4>concat()</h4>

<p>数组合并</p>

<h4>slice()</h4>

<p>返回指定的数组片段</p>

<h4>splice()</h4>

<p>在数组中插入或删除元素的通用方法</p>

<h4>push()&amp;pop()</h4>

<p>在队尾实现添加或删除，实现类似堆栈的功能</p>

<h4>unshift()&amp;shift()</h4>

<p>在队头实现添加或者删除。</p>

<h3>数组方法分类</h3>

<h4>改变原数组：</h4>

<p>reverse() , splice() , push()&amp;pop() , unshift()&amp;shift()</p>

<h4>返回新数组：</h4>

<p>concat()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery插件开发]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/22/a-jquery-example/"/>
    <updated>2013-04-22T18:48:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/22/a-jquery-example</id>
    <content type="html"><![CDATA[<p>JQuery插件的开发是有一套成熟的规范的：
主要由以下几部分组成：</p>

<h4>(function($){})(jQuery)</h4>

<p>最外层的封装</p>

<h4>$.fn</h4>

<p>$.fn = JQuery.prototype。<br/>
在插件制作中，所有的对象方法都添加到$.fn对象中</p>

<h4>$.extend和$.fn.extend()</h4>

<p>extend(dest,src1,src2):将src1,src2合并到dest中，属性名相同的则后面的自动覆盖前面的，因此常用于default值的设置
extend(boolean dest,src1,src2):如果第一个参数为布尔值，则决定是否深层覆盖，如果为true，则嵌套的对象也将进行覆盖</p>

<pre><code>$.extend(src)    //该方法将src合并到jquery的全局对象中,为JQuery添加了一个静态方法，可以用$.src()直接执行
$.fn.extend(src) //该方法将src合并到jquery的实例对象中，只有JQuery的实例才可以调用，比如$("#input").src()
</code></pre>

<h4>this.each(function(){ })</h4>

<p>编写该扩展方法执行的函数</p>

<p>example：</p>

<pre><code>(function($){ 
  $.fn.tableUI = function(options){ 
    var defaults = { 
      evenRowClass:"evenRow", 
      oddRowClass:"oddRow", 
      activeRowClass:"activeRow" 
    } 
    var options = $.extend(defaults, options); 
    this.each(function(){ 
      var thisTable=$(this); 
      $(thisTable).find("tr:even").addClass(options.evenRowClass); 
      $(thisTable).find("tr:odd").addClass(options.oddRowClass); 
      $(thisTable).find("tr").bind("mouseover",function(){ 
        $(this).addClass(options.activeRowClass); 
        }); 
        $(thisTable).find("tr").bind("mouseout",function(){ 
          $(this).removeClass(options.activeRowClass); 
          }); 
          }); 
        }; 
})(jQuery); 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript插件开发]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/22/a-js-example/"/>
    <updated>2013-04-22T17:43:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/22/a-js-example</id>
    <content type="html"><![CDATA[<p>用一个样例来讲述javascript插件的开发过程，虽然工作中更多的使用JQuery，但是原生js基础仍然很重要。
功能说明：一幅长长的画卷，按照一定的速度，或垂直，或水平循环滚动，在指定位置暂停X秒，鼠标进入停止，可以用按钮控制。
可以控制的属性：
direction: 方向水平or垂直
stop_time: 暂停时间
hover_control: 鼠标进入是否停止
stop_position: 暂停位置（px）
id：滚动体的id
container:滚动体容器的id</p>

<pre><code>var scroll={
  container:"content",
  id: "box",
  dirction:"marginTop",
  stop_time:3000,
  hover_control:"on",
  stop_position:[330, 660]
}
var scroll_module = (function(){
  var container = document.getElementById(scroll.container);
  var scroll_part = document.getElementById(scroll.id);
  var divheight= scroll_part.offsetHeight
  var part2 = scroll_part.cloneNode(true);
  container.appendChild(part2);
  var martop = parseInt(scroll_part.style.marginTop || 0 )
  var hoverover = false;
  var go = function(){
    martop = martop - 2;
    scroll_part.style.marginTop = martop + "px";
    timer = setTimeout(go , 5);
    for (var i=0,j=i+1;i&lt;scroll.stop_position.length+1;i++){
      if (martop &lt;=-divheight){
        martop = 0;
        clearTimeout(timer);
        setTimeout(function(){
          go()
        },scroll.stop_time)
      }
      else if (martop== -scroll.stop_position[i]){
        clearTimeout(timer);
        if(hoverover == false){
          setTimeout(function(){
            go()
          },scroll.stop_time)
        }
      }
    }
  }
  var hoveron = function(){
    scroll_part.onmouseover=function(){
      hoverover = true;
      alert(hoverover)
    }
    scroll_part.onmouseout=function(){
      go();
      hoverover = false;
      alert(hoverover)
    }
  }
   return {
     go : go,
     hoveron : hoveron
    }
})()
  scroll_module.go();
  scroll_module.hoveron();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记三：事件处理]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/02/event/"/>
    <updated>2013-04-02T11:11:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/02/event</id>
    <content type="html"><![CDATA[<h3>注册事件处理程序</h3>

<h4>为javascript对象设置事件处理</h4>

<p>用“on+事件名”来注册事件
example：</p>

<pre><code>window.onload = function(){
    .......
}
</code></pre>

<h4>为HTML标签设置事件处理</h4>

<p>有一系列标准方法： <br/>
onfocus , onblur , onresize , ononline onafterprint , onundo , onredo , onload , onerror , onstorage , onhashchange <br/>
onmessage , onoffline , onpagehide , onhaschange , onbeforeprint , onunload , onbeforeunload , onpopstate</p>

<p>example:</p>

<pre><code>&lt;button onclick = "alert("Thank you!")"&gt;click me&lt;/button&gt;
</code></pre>

<h4>addEventListener( )</h4>

<p>IE8之前的版本不支持，忽略。三个参数(&#8220;click&#8221; , function(){&#8230;.} , false)</p>

<h3>表单事件</h3>

<h3>window事件</h3>

<h3>鼠标事件</h3>

<p>click：点击事件 <br/>
dbclick:双击 <br/>
mousedown:按下鼠标 <br/>
mouseup：释放鼠标 <br/>
mousemove：移动鼠标 <br/>
mouseover , mouseenter（不冒泡）：鼠标进入元素 <br/>
mouseout , mouseleave(不冒泡)：鼠标离开元素</p>

<h3>键盘事件</h3>

<h3>DOM事件</h3>

<h3>HTML5事件</h3>

<h3>触摸屏事件</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记二：客户端js基础]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/01/javascript%252Cdomyuan-su-de-cao-zuo/"/>
    <updated>2013-04-01T16:21:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/01/javascript%2Cdomyuan-su-de-cao-zuo</id>
    <content type="html"><![CDATA[<h3>计时器</h3>

<pre><code>setTimeout(fun() , 2000); //两秒后执行函数fun()
setInterval(fun() , 2000); //每隔2秒执行一次fun()
</code></pre>

<h3>对话框</h3>

<p>alert() :打印js脚本返回值，一般只用于调试  <br/>
confirm():要求用户确认或取消，返回布尔值  <br/>
prompt():让用户输入字符串，并返回该字符串  <br/>
showModalDialog():第一个参数是url，第二个参数是任意值，可通过window.dialogArguments访问到，第三个参数包含以分号隔开的name=value对。 <br/>
参数样例：&#8217;resizable:yes;scroll:yes;status:no;dialogWidth=320px;dialogHeight=230px;center=yes;help=no&#8217;</p>

<h3>window对象</h3>

<h4>location</h4>

<p>当前显示文档的url
window.location === document.location
document.URL:文档首次载入后的URL字符串，如果片段标示符（如#top）发生改变，document.URL不会发生改变，而window.location会相应变化。</p>

<p>URL分解：
href：默认，获取完整url  <br/>
search：获取？后的内容  <br/>
protocol：返回当前url的协议  <br/>
host：设置或返回主机名和端口号  <br/>
hostname：设置或返回主机名 <br/>
port：设置或返回端口号 <br/>
pathname：设置或返回url的路径部分 <br/>
hash：获取#后的内容</p>

<p>location方法： <br/>
assign() 加载新文档 <br/>
reload() 刷新 <br/>
replace() 加载新文档，并删除旧文档浏览记录</p>

<h4>history</h4>

<p>该窗口的浏览历史
history方法：
back() , forward():后退，前进 <br/>
go()：接受一个整数参数，作为前进后退的步数</p>

<h4>navigator</h4>

<p>navigator属性引用的是Navigator对象，Navigator对象主要包含4种属性：</p>

<p>userAgent：最常用的浏览器嗅探代码，http头中的的字符串<br/>
appVersion：浏览器厂商和版本信息的详细字符串 <br/>
platform：操作系统信息 <br/>
appName：web浏览器的全称</p>

<p>Navigator对象其他非标准化属性：
onLine：判断浏览器是否连接网络</p>

<h4>screen</h4>

<p>height,width:屏幕宽高 <br/>
availHeight , avaliWidth:除去任务栏等真实可用的宽高</p>

<h4>open() &amp; close()</h4>

<p>example:</p>

<pre><code> window.open("url" , "窗口名" ,"width=400,height=350,resize=yes")
 window.close()
</code></pre>

<h3>选取元素</h3>

<h4>getElementById( )</h4>

<p>获取设置了id的元素</p>

<h4>getElementByName( )</h4>

<p>获取设置了name属性的元素</p>

<h4>getElementByTagName( )</h4>

<p>获取标签名，example：</p>

<pre><code>var ps = document.getElementByTagName("p") //获取所有的&lt;p&gt;元素
var first_p = document.getElementByTagName("p")[0]  //获取第一个&lt;p&gt;元素
</code></pre>

<h4>getElementByClassName( )</h4>

<p>获取类名</p>

<h4>innerHTML</h4>

<p>获取标签内的html文档</p>

<h4>textContent = innerText</h4>

<p>获取或修改标签内文本内容，textContent在一些IE版本中不支持</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript权威指南笔记一：核心语法(对象)]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/04/01/basic-javascript-values/"/>
    <updated>2013-04-01T14:56:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/04/01/basic-javascript-values</id>
    <content type="html"><![CDATA[<h3>数据类型：</h3>

<p>javascript中有六种基础数据类型：数字，字符串，布尔值，对象，函数，以及undefined。</p>

<h3>运算符：</h3>

<h3>创建对象：</h3>

<h4>对象直接量：</h4>

<pre><code>var empty = {}
var book = {
    "main title" : "javascript" , 
    "for" : "all" ,
    "author" : "xieyu"
}
</code></pre>

<h4>使用new运算符创建对象：</h4>

<pre><code>var o = new Object(); //创建一个空对象，和{}一样
var a = new Array(); //创建一个空数组，和[]一样
</code></pre>

<h4>使用Object.create():</h4>

<pre><code>参数是用于继承的原型对象
var o1 = Object.create({x:1 , y:2});
</code></pre>

<h4>原型(prototype)</h4>

<p>除了null之外所有对象都继承于Obiect.prototype</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails常用gem]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/03/31/my-third-blog/"/>
    <updated>2013-03-31T21:00:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/03/31/my-third-blog</id>
    <content type="html"><![CDATA[<h4>总结一下最近rails项目用到的gems</h4>

<p><a href="http://rubygems.org">rubygems官方网站</a>  <br/>
<a href="https://www.ruby-toolbox.com/">最流行的rubygems排名</a></p>

<h3>测试：</h3>

<p><a href="https://github.com/rspec/rspec-rails">rspec-rails</a><br/>
<a href="https://github.com/pry/pry">pry</a>  (命令行断点调试工具)</p>

<h3>前端 ：</h3>

<p><a href="https://github.com/Compass/compass-rails">compass-rails</a><br/>
<a href="https://github.com/kristianmandrup/masonry-rails">masonry-rails</a> （瀑布流）</p>

<h3>部署：</h3>

<p><a href="http://www.seeyon.com/news/4062.html">unicorn</a>     <br/>
<a href="https://github.com/FooBarWidget/passenger">passenger</a></p>

<h3>web service接口：</h3>

<p><a href="https://github.com/intridea/grape">grape</a></p>

<h3>数据库支持:</h3>

<p><a href="https://github.com/brianmario/mysql2">mysql2</a> mysql数据库支持 <br/>
<a href="https://github.com/mongoid/mongoid">mongoid</a> mongodb数据库支持</p>

<h3>后台队列:</h3>

<p><a href="https://github.com/resque/resque">resque</a></p>

<h3>文件上传：</h3>

<p><a href="https://github.com/jnicklas/carrierwave/">Carrierwave</a></p>

<h3>分页：</h3>

<p><a href="https://github.com/mislav/will_paginate">will_paginate</a> <br/>
<a href="https://github.com/amatsuda/kaminari">Kaminari</a></p>

<h3>用户系统：</h3>

<p><a href="https://github.com/plataformatec/devise">devise</a> 全面的登陆注册系统    <br/>
<a href="https://github.com/ryanb/cancan">cancan</a> 用户权限设置  <br/>
<a href="https://github.com/codahale/bcrypt-ruby">bcrypt-ruby</a> 用于加密</p>

<h3>富文本编辑：</h3>

<p><a href="https://github.com/Macrow/rails_kindeditor">rails_kindeditor</a></p>

<h3>Bootstrape:</h3>

<p><a href="https://github.com/seyhunak/twitter-bootstrap-rails">twitter-bootstrap-rails</a> <br/>
<a href="https://github.com/thomas-mcdonald/bootstrap-sass">bootstrap-sass</a></p>

<h3>图片处理：</h3>

<p><a href="https://github.com/minimagick/minimagick">mini_magick</a>  （需要安装imagemagick）</p>

<h3>memcache:</h3>

<p><a href="https://github.com/mperham/dalli">dalli</a></p>

<h3>JS数据引用</h3>

<p><a href="https://github.com/gazay/gon">gon</a> #可以在JS中使用服务端数据</p>
]]></content>
  </entry>
  
</feed>
