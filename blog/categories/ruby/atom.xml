<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2013-07-08T15:26:53+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby元编程四：类定义]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth/"/>
    <updated>2013-07-01T22:47:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth</id>
    <content type="html"><![CDATA[<h2>类定义</h2>

<p>在ruby中，类定义和其他语言有所不同，当使用class关键字时，并非是在指定对象未来的行为方式，实际上是在运行代码。
类定义会返回最后一条语句的值。
每当通过class关键字打开一个类，这个类就成为当前类。在类定义中，当前对象self就是正在定义的类。</p>

<h3>类实例变量</h3>

<pre><code>class MyClass
    @var = 0
    def self.method_one
        @var = 1
    end

    def method_two
        @var = 2
    end

    def method_three
        @var = 3
    end

    class&lt;&lt;self 
        def method_four
            x=4
        end

        def method_five
            x=5
        end
    end
end

obj = MyClass.new
obj.method_two           #=&gt;2
obj.method_threee        #=&gt;3
MyClass.method_one       #=&gt;1
类实例变量只有类可以调用它，而类的实例则不行，实例变量则正好相反。
class&lt;&lt;self 用于一次性定义多个类方法
</code></pre>

<h3>类变量</h3>

<p>以@@开头，它们可以被子类或者类的实例所使用
后定义的同名类变量会覆盖之前的，不论它的位置，example：</p>

<pre><code>@@v = 1
class A
  @@v = 2
end
@@v                        #=&gt;2
</code></pre>

<h3>扁平化作用域</h3>

<p>使用class, def,  module关键字会产生作用域门.但是如果想在一个模块中共享变量,就需要用到扁平化作用域.
使用ClassName = Class.new , ModuleName = module.new , define_method: method_name do ....end
example:</p>

<pre><code>    my_var = "success"
    MyClass = Class.new do
      puts "#{my_var} is get"
      define_method :printvar do
        puts "#{my_var} is in the method"
      end
    end
    MyClass.new.printvar
</code></pre>

<h3>单件方法与类方法</h3>

<p>Ruby允许给单个对象添加方法，这就是单件方法。example:</p>

<pre><code>str = "hahaha"
def str.title?
    self.upcase == self
end
</code></pre>

<p>而类方法实际就是一种单件方法，因为类也是对象，它针对这个类生效。</p>

<h3>类宏</h3>

<p>Ruby对象没有属性，如果想要定义属性，就需要定义两个拟态方法，一个读方法和一个写方法。</p>

<pre><code>class MyClass
    def height=(val)
        @height = val
    end

    def height
        @height
    end
end
obj = MyClass.new
obj.height = "160cm"
obj.height     #=&gt;"160cm"

这样非常麻烦，我们可以使用module#attr_*系列方法，其中attr_reader()可以生成一个读方法；attr_writer()可以生成写方法；attr_accessor()则可以生成读写方法。
那么上面的例子就可以改写为：

class MyClass
    attr_accessor :height
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程三：代码块]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third/"/>
    <updated>2013-06-29T20:53:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third</id>
    <content type="html"><![CDATA[<h2>闭包</h2>

<p>块可以作为一个闭包.
example:</p>

<pre><code>def my_method
    x="Goodbye"
    yield("cruel")
end
x = "Hello"
my_method {|y| "#{x} , #{y} world"}   #=&gt;Hello, cruel world
</code></pre>

<p>块获得了局部绑定的变量x，并一直带着它。块并不能接受方法中定义的x="Goodbye"</p>

<h2>作用域与作用域门</h2>

<p>程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：
类定义
模块定义
方法
它们分别用关键字class，module，def为标志每一个关键字都充当了一个作用域门。</p>

<h2>Proc类，proc，lambda , yield , &amp;操作符</h2>

<h3>将块转化为对象</h3>

<p>使用块需要分两步：1.把块的逻辑写好打包备用。2.调用块<br/>
块不是对象，如果想要存储一个块供以后执行，需要一个对象。<br/>
Ruby标准库提供Proc类，它接受一个块作为参数，从而将这个块转化为对象：</p>

<pre><code>inc = Proc.new { |x| x+1}
inc.call(2)                       #=&gt;3
</code></pre>

<p>而lambda ， proc 本质也是将块转化为Proc类的实例化对象</p>

<h3>lambda，proc的区别</h3>

<p>1.使用return关键字的时候，lambda从它本身返回，而proc则会在定义它的作用域中返回。</p>

<pre><code>def double(param)
    param.call*2
end
l=lambda {return 10}
double(l)                         #=&gt;20
p=proc {return 10}
double(p)                         #=&gt;报错LocalJumpError
</code></pre>

<p>2.参数数量
调用lambda的时候，如果参数数量不对则会报错，而proc会自动调整，忽略多余的，如果少了则会将其赋为nil</p>

<h3>&amp;操作符</h3>

<p>它可以实现：
1.把这个块传递给另一个方法
2.把一个块转化为proc,只需要去掉&amp;操作符即可。</p>

<p>example1：</p>

<pre><code>def math(a, b)
    yield(a , b)
end
def teach_math(a , b , &amp;block)
    puts math(a , b , &amp;black)
end
teach_math(2,3) {|x ,y| x*y}         #=&gt;6
</code></pre>

<p>example2:</p>

<pre><code>def test(&amp;block)
    block
end
t=test {|name| "Hello,#{name}"}
puts t.call("Tom")                         #=&gt;Hello , Tom
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_file]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-file/"/>
    <updated>2013-06-17T13:21:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-file</id>
    <content type="html"><![CDATA[<h3>检验存在</h3>

<pre><code>File.file? "test.txt"                  #检验文件存在性
File.exists? "test.txt"                #只检验存在性，无论是文件夹还是其他的文件类型
File.directory? "test.txt"             #检验文件夹存在性
</code></pre>

<h3>检验权限</h3>

<pre><code>File.readable?
File.writable?
File.executable?
File.owned?                         #文件是否属于当前用户组，windows下总是为true
</code></pre>

<h3>文件属性</h3>

<pre><code>File.stat                    # 文件的详细属性
&lt;File::Stat dev=0x700, ino=670451, mode=0100664, nlink=1, uid=1000, gid=1000, rdev=0x0, size=8, blksize=4096, blocks=8, atime=2013-06-05 09:37:38 +0800, mtime=2013-06-05 09:37:27 +0800, ctime=2013-06-05 09:37:27 +0800&gt;
</code></pre>

<p>atime ：最后读取的时间
mtime ：最后修改内容的时间
ctime ：最后修改的时间（包括修改权限等）</p>

<h3>文件列表</h3>

<pre><code>列出某路径下的文件列表
Dir.getwd                           #获取工作路径
Dir.chdir '/bin'                    #改变工作路径
Dir.mkdir 'haha'                    #创建工作路径
Dir.entries "/"
Dir.foreach("/") do |file|
  puts file
end
</code></pre>

<h3>文件写入</h3>

<pre><code>‘w’：写模式，覆盖写入
‘a’：附加模式，不会覆盖原有内容
open("test.txt" , "a") do |f|
  f.puts("aaaaaaaa")
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby的HTTP类库]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http/"/>
    <updated>2013-06-17T13:19:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http</id>
    <content type="html"><![CDATA[<h2>HTTP</h2>

<h3>NET::HTTP.get</h3>

<pre><code>    require "net/http"
    Net::HTTP.get('example.com', '/index.html')      # =&gt; String

    uri = URI('http://example.com/index.html?count=10')
    Net::HTTP.get(uri)        # =&gt; String
</code></pre>

<p>可以使用get方法进行下载:</p>

<pre><code>    File.open("test.jpg" , "w") do |f|
        f.write Net::HTTP.get(uri) 
    end
</code></pre>

<p>接收动态参数:</p>

<pre><code>    uri = URI('http://bbs.csdn.net/forums/ROR')
    params = { :limit =&gt; 10, :page =&gt; 3 }
    uri.query = URI.encode_www_form(params)
    res = Net::HTTP.get_response(uri)                         #get_response()方返回一个对象
    puts res.body if res.is_a?(Net::HTTPSuccess)
</code></pre>

<h2>URI</h2>

<h3>Basic</h3>

<pre><code>    require 'uri'
    uri = URI("http://foo.com/posts?id=30&amp;limit=5#time=1305298413")
    #=&gt; #&lt;URI::HTTP:0x00000000b14880
          URL:http://foo.com/posts?id=30&amp;limit=5#time=1305298413&gt;
    uri.scheme                                       #=&gt; "http"
    uri.host                                            #=&gt; "foo.com"
    uri.path                                            #=&gt; "/posts"
    uri.query                                          #=&gt; "id=30&amp;limit=5"
    uri.fragment                                     #=&gt; "time=1305298413"
    uri.to_s                                             #=&gt; "http://foo.com/posts?id=30&amp;limit=5#time=1305298413"
</code></pre>

<h3>Joins URIs.</h3>

<pre><code>    require 'uri'
    p URI.join("http://example.com/","main.rbx")                 # =&gt; #&lt; URL:http://localhost/main.rbx&gt;
    p URI.join('http://example.com', 'foo')                            # =&gt; #&lt; URL:http://example.com/foo&gt;
    p URI.join('http://example.com', '/foo', '/bar')                 # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo', 'bar')                  # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo/', 'bar')                 # =&gt; #&lt; URL:http://example.com/foo/bar&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_array类常用方法]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-array/"/>
    <updated>2013-06-17T13:18:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-array</id>
    <content type="html"><![CDATA[<h2>取值</h2>

<h3>索引取值</h3>

<pre><code>    arr  = [1, 2, 3, 4, 5]
    arr[0]  = 1
    arr.at(0) = 1
</code></pre>

<h3>take &amp; drop</h3>

<pre><code>    arr.take 3              #=&gt;[1, 2, 3]
    arr.drop 3              #=&gt;[4, 5]
</code></pre>

<h2>插值</h2>

<h3>pop, push &amp;&amp; shift , unshift</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.push(5)              #=&gt; [1, 2, 3, 4, 5]
    arr &lt;&lt; 6                  #=&gt; [1, 2, 3, 4, 5, 6]
    arr.pop                    #=&gt; 6
    arr                          #=&gt; [1, 2, 3, 4, 5]
    arr.unshift 0             #=&gt;[0, 1, 2, 3, 4, 5]
    arr.shift                   #=&gt; 0 
    arr                           #=&gt;[1, 2, 3, 4, 5]
    arr.push [1, 2, 3]      #=&gt;[1, 2, 3, 4, 5, [1, 2, 3] ]
</code></pre>

<h3>insert</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.insert(3 , 5)        #=&gt;[1, 2, 3, 5, 4]              #第一个参是索引值
</code></pre>

<h2>删除</h2>

<h3>delete</h3>

<pre><code>    arr = [1, 2, 2, 3, 4]
    arr.delete 2            #=&gt;2
    arr                         #=&gt;[1, 3, 4]                       #delete根据实际值删除全部
    arr.delete_at 2        #=&gt;4 
    arr                         #=&gt;[1, 3]                           #delete_at根据索引值删除
</code></pre>

<h3>compact(去nil)</h3>

<pre><code>    arr  = [1, nil, 2 , nil, 3 , 4]
    arr.compact             #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, nil, 2 , nil, 3 , 4]
    arr.compact!            #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, 2, 3, 4]
                                  #compact: v, adj 紧凑的,使紧凑
</code></pre>

<h3>uniq(去重)</h3>

<pre><code>    arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
    arr.uniq                  #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]
    arr.uniq!
</code></pre>

<h2>迭代</h2>

<h3>each</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.each {|a| puts a+1}               执行结果:1234 #=&gt;[1, 2, 3, 4]   #返回原数组
</code></pre>

<h3>map&amp;map!</h3>

<pre><code>    arr.map {|a| a+1}                            #=&gt;[2, 3, 4, 5]           # 返回block处理过后的结果
    arr.map! {|a| a+1}                          #=&gt;[2, 3, 4, 5]         # 返回block处理过后的结果,并改变原数组
</code></pre>

<h2>选择</h2>

<h3>不改变原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.select { |a| a &gt; 3 }     #=&gt; [4, 5, 6]
    arr.reject { |a| a &lt; 3 }     #=&gt; [3, 4, 5, 6]                     #可以理解为!select
    arr.drop_while { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                          #=&gt; [1, 2, 3, 4, 5, 6]       
</code></pre>

<h3>修改原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.delete_if { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                         #=&gt; [4, 5, 6]

    arr = [1, 2, 3, 4, 5, 6]
    arr.keep_if { |a| a &lt; 4 } #=&gt; [1, 2, 3]
    arr                       #=&gt; [1, 2, 3]
</code></pre>

<h2>连接</h2>

<h2>判断</h2>

<h3>存在性</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.include? 1                 #=&gt;true
</code></pre>

<h3>为空?</h3>

<pre><code>    arr.empty?                     #=&gt;false
</code></pre>

<h3>相等</h3>

<pre><code>    a=[1, 2]
    b=[1, 2]
    a.eql? b                          #=&gt;true 
    a.equal? b                       #=&gt;false    equal?只有当二者是同一个对象的时候才会为true
</code></pre>
]]></content>
  </entry>
  
</feed>
