<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-03-16T21:35:06+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby 同步/异步/多线程模型测试]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce/"/>
    <updated>2013-12-25T11:30:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce</id>
    <content type="html"><![CDATA[<p>测试条件是对一个json接口进行1000次调用。</p>

<h3>同步模型：</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
1000.times do
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
</code></pre>

<p>接口延迟约15ms,执行总时间1分25秒。当接口延迟5ms左右时执行总时间约25秒</p>

<h3>异步模型</h3>

<p>异步回调模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'json'
1000.times do
  EventMachine.run {
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    http.errback { p 'Uh oh'; EM.stop }
    http.callback {
      req = http.response
      @slides = JSON.parse(req)["data"]["list"]
      p @slides[0]
      EM.stop
    }
  }
end
</code></pre>

<p>纤程模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'em-synchrony'
require 'json'
require 'em-synchrony/em-http'   
1000.times do
  EM.synchrony do
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    p @slides[0]
    EM.stop
  end
end
</code></pre>

<p>两种异步模型基本一样，在接口延迟15ms时测试均为50秒完成，接口延迟5ms时20+秒，和同步模型基本没有差别。</p>

<h3>多线程模型</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
def func1
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
200.times do
  threads = []
  5.times do 
    threads &lt;&lt; Thread.new { func1 }
  end
  threads.each { |t| t.join }
end
</code></pre>

<p>接口延迟15ms时，5并发执行200次测试42秒完成，最快，接口延迟5ms时8秒完成，最快。不过在测试10并发的时候会出现不稳定的情况，50并发测试高达3分半。</p>

<h3>Node.js模型</h3>

<pre><code>var http = require('http')
var options = {
  host: '117.79.93.206',
  port: 80,
  path: 'http://test.net/api/format/json/'
};
function get_message(){
    http.get(options, function(res){
        var body = '';
        res.on('data', function(chunk) {
            body += chunk;
        });
        res.on('end', function() {
            var content = JSON.parse(body)
            console.log(content.data.list[0]);
        });
        }).on('error', function(e) {
        console.log("Got error: " + e.message);
    });
}
for(i=0; i&lt;1000; i++){
    get_message();
}
</code></pre>

<p>node.js果然名不虚传，接口延迟15ms,下约4秒完成，接口延迟5ms下平均2秒钟就可以完成，秒杀ruby。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中间层解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an/"/>
    <updated>2013-12-20T15:34:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h3>调用API构建前端</h3>

<p>一般情况下，rails应用都是从数据库进行数据获取，而采用API调用的话，就不再需要model层了，只需要在控制器中用http库进行接口调用就可以了，大大简化了结构。
example:</p>

<pre><code>require 'open-uri'
require 'json'
require 'net/http'
def index  
  uri = URI("http://test.csdn.net/api/format/json")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["contents"]
end
</code></pre>

<h3>问题：多个API调用时的阻塞问题</h3>

<pre><code>def index  
  uri_one = URI("http://test.csdn.net/api/1/format/json")
  uri_two = URI("http://test.csdn.net/api/2/format/json")
  uri_three = URI("http://test.csdn.net/api/3/format/json")
  ......
  req_one = Net::HTTP.get(uri_one)
  req_two = Net::HTTP.get(uri_two)
  req_three = Net::HTTP.get(uri_three)
  ......
  @slides = JSON.parse(req)["data"]["contents"]
  ......
end
</code></pre>

<p>如果有10个API调用，每个<code>Net::HTTP.get(uri)</code>通信耗时30ms，那么就是300ms的时间。</p>

<h3>解决方案一：多线程处理</h3>

<pre><code>threads = []
threads &lt;&lt; Thread.new {@req_one = Net::HTTP.get(uri_one)}
threads &lt;&lt; Thread.new {@req_two = Net::HTTP.get(uri_two)}
threads &lt;&lt; Thread.new {@req_three = Net::HTTP.get(uri_three)}
......
threads.each { |t| t.join }
data = JSON.parse(@req_one)["data"]
</code></pre>

<p>多进程是抢占资源的一个模型，并非并行计算，比如线程1执行一个http通信后中间有30ms的I/O时间，那么这段阻塞的时间就会被线程2抢占。
开启多线程并行处理，可以很大程度上提高处理速度。但是有两个问题：
一、开多个线程以及线程间的切换造成资源开销增加，实际上降低了应用的吞吐能力。
二、由于Ruby存在GIL (Global Interpreter Lock)，并不能真正利用多线程进行并行计算。（JRuby 去除了 GIL，是真正意义的多线程，既能应付 IO Block，也能充分利用多核 CPU 加快整体运算速度。）</p>

<h3>解决方案二：采用异步模型处理</h3>

<h4>Ruby的异步解决方案：Eventmachine</h4>

<p>在Gemfile中添加：</p>

<pre><code>gem 'eventmachine'
gem 'em-http-request', :require =&gt; 'em-http'
</code></pre>

<p>控制器中的代码：</p>

<pre><code>EventMachine.run {
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  http.errback { 
    render :text "接口连接失败"; 
    EM.stop 
  }
  http.callback {
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    @page_count = JSON.parse(req)["data"]["count"].to_i/18+1
    EM.stop
  }
}
</code></pre>

<p>这种方式不仅解决了阻塞问题，而且可以有效的提高系统的吞吐能力。但带来的问题是代码量增加，复杂逻辑下代码的复杂度成倍增加，不利于开发和维护。</p>

<h4>引入纤程（Fiber）,用同步代码编写异步程序</h4>

<p>在Gemfile中添加<code>gem 'em-synchrony'</code>。
控制器代码：</p>

<pre><code>EM.synchrony do
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  req = http.response
  @slides = JSON.parse(req)["data"]["list"]
  EM.stop
end
</code></pre>

<p>多个接口调用实例：</p>

<pre><code>require "em-synchrony"
require "em-synchrony/em-http"
require "em-synchrony/fiber_iterator"
EM.synchrony do
  concurrency = 2
  urls = ['http://url.1.com', 'http://url2.com']
  results = []
  EM::Synchrony::FiberIterator.new(urls, concurrency).each do |url|
    res = EventMachine::HttpRequest.new(url).get
    results &lt;&lt; res.response
  end
  puts results # all completed requests
  EventMachine.stop
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程五：编写代码的代码]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five/"/>
    <updated>2013-07-14T21:06:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five</id>
    <content type="html"><![CDATA[<h2>Kernel#eval</h2>

<p>kernel#eval会直接 执行字符串中的代码，并返回执行结果，和javascript中的eval()一样。</p>

<h2>钩子方法</h2>

<h3>Class#inherited</h3>

<p>当类被继承时，调用该方法，平时它什么也不做。，可以通过覆写它来形成类似回调函数的用法。
example:</p>

<pre><code>class MyClass                         #inherited是Class的一个实例方法，对于一个特定的类，则是它的类方法。
    def self.inherited(param)         #注意inherited方法需要一个参数，参数是继承者的类名
        p "lala"
    end
end

MySonClass &lt; MyClass; end       #=&gt;"lala"
</code></pre>

<h3>更多钩子方法</h3>

<p>Class#inherited是最常用的，还有其他一些：
Module#includeed
Module#method_added
Module#method_removed
Module#method_undefined</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程四：类定义]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth/"/>
    <updated>2013-07-01T22:47:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth</id>
    <content type="html"><![CDATA[<h2>类定义</h2>

<p>在ruby中，类定义和其他语言有所不同，当使用class关键字时，并非是在指定对象未来的行为方式，实际上是在运行代码。
类定义会返回最后一条语句的值。
每当通过class关键字打开一个类，这个类就成为当前类。在类定义中，当前对象self就是正在定义的类。</p>

<h3>类实例变量</h3>

<pre><code>class MyClass
    @var = 0
    def self.method_one
        @var = 1
    end

    def method_two
        @var = 2
    end

    def method_three
        @var = 3
    end

    class&lt;&lt;self 
        def method_four
            x=4
        end

        def method_five
            x=5
        end
    end
end

obj = MyClass.new
obj.method_two           #=&gt;2
obj.method_threee        #=&gt;3
MyClass.method_one       #=&gt;1
类实例变量只有类可以调用它，而类的实例则不行，实例变量则正好相反。
class&lt;&lt;self 用于一次性定义多个类方法
</code></pre>

<h3>类变量</h3>

<p>以@@开头，它们可以被子类或者类的实例所使用
后定义的同名类变量会覆盖之前的，不论它的位置，example：</p>

<pre><code>@@v = 1
class A
  @@v = 2
end
@@v                        #=&gt;2
</code></pre>

<h3>扁平化作用域</h3>

<p>使用class, def,  module关键字会产生作用域门.但是如果想在一个模块中共享变量,就需要用到扁平化作用域.
使用ClassName = Class.new , ModuleName = module.new , define_method: method_name do ....end
example:</p>

<pre><code>    my_var = "success"
    MyClass = Class.new do
      puts "#{my_var} is get"
      define_method :printvar do
        puts "#{my_var} is in the method"
      end
    end
    MyClass.new.printvar
</code></pre>

<h3>单件方法与类方法</h3>

<p>Ruby允许给单个对象添加方法，这就是单件方法。example:</p>

<pre><code>str = "hahaha"
def str.title?
    self.upcase == self
end
</code></pre>

<p>而类方法实际就是一种单件方法，因为类也是对象，它针对这个类生效。</p>

<h3>类宏</h3>

<p>Ruby对象没有属性，如果想要定义属性，就需要定义两个拟态方法，一个读方法和一个写方法。</p>

<pre><code>class MyClass
    def height=(val)
        @height = val
    end

    def height
        @height
    end
end
obj = MyClass.new
obj.height = "160cm"
obj.height     #=&gt;"160cm"

这样非常麻烦，我们可以使用module#attr_*系列方法，其中attr_reader()可以生成一个读方法；attr_writer()可以生成写方法；attr_accessor()则可以生成读写方法。
那么上面的例子就可以改写为：

class MyClass
    attr_accessor :height
end
</code></pre>

<h3>环绕别名</h3>

<p>从一个重新定义的方法中调用原始的，被重命名的版本。 三个步骤： 1. 通过alias 对原有方法定义一个别名 2. 覆写原有方法 3. 在该方法中调用别名方法 这样做的好处，可以改写原有方法，又不破坏原有功能 。</p>

<pre><code>    class String  
        alias :old_reverse :reverse
        def reverse 
            "x#{old_reverse}x"
        end
    end 
    "abc".reverse  =&gt;xcbax
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程三：代码块]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third/"/>
    <updated>2013-06-29T20:53:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third</id>
    <content type="html"><![CDATA[<h2>闭包</h2>

<p>块可以作为一个闭包.
example:</p>

<pre><code>def my_method
    x="Goodbye"
    yield("cruel")
end
x = "Hello"
my_method {|y| "#{x} , #{y} world"}   #=&gt;Hello, cruel world
</code></pre>

<p>块获得了局部绑定的变量x，并一直带着它。块并不能接受方法中定义的x="Goodbye"</p>

<h2>作用域与作用域门</h2>

<p>程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：
类定义
模块定义
方法
它们分别用关键字class，module，def为标志每一个关键字都充当了一个作用域门。</p>

<h2>Proc类，proc，lambda , yield , &amp;操作符</h2>

<h3>将块转化为对象</h3>

<p>使用块需要分两步：1.把块的逻辑写好打包备用。2.调用块<br/>
块不是对象，如果想要存储一个块供以后执行，需要一个对象。<br/>
Ruby标准库提供Proc类，它接受一个块作为参数，从而将这个块转化为对象：</p>

<pre><code>inc = Proc.new { |x| x+1}
inc.call(2)                       #=&gt;3
</code></pre>

<p>而lambda ， proc 本质也是将块转化为Proc类的实例化对象</p>

<h3>lambda，proc的区别</h3>

<p>1.使用return关键字的时候，lambda从它本身返回，而proc则会在定义它的作用域中返回。</p>

<pre><code>def double(param)
    param.call*2
end
l=lambda {return 10}
double(l)                         #=&gt;20
p=proc {return 10}
double(p)                         #=&gt;报错LocalJumpError
</code></pre>

<p>2.参数数量
调用lambda的时候，如果参数数量不对则会报错，而proc会自动调整，忽略多余的，如果少了则会将其赋为nil</p>

<h3>&amp;操作符</h3>

<p>它可以实现：
1.把这个块传递给另一个方法
2.把一个块转化为proc,只需要去掉&amp;操作符即可。</p>

<p>example1：</p>

<pre><code>def math(a, b)
    yield(a , b)
end
def teach_math(a , b , &amp;block)
    puts math(a , b , &amp;black)
end
teach_math(2,3) {|x ,y| x*y}         #=&gt;6
</code></pre>

<p>example2:</p>

<pre><code>def test(&amp;block)
    block
end
t=test {|name| "Hello,#{name}"}
puts t.call("Tom")                         #=&gt;Hello , Tom
</code></pre>
]]></content>
  </entry>
  
</feed>
