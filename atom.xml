<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[庇护祝福的分享]]></title>
  <link href="http://xieyu33333.github.com/atom.xml" rel="self"/>
  <link href="http://xieyu33333.github.com/"/>
  <updated>2014-02-13T20:48:33+08:00</updated>
  <id>http://xieyu33333.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    <email><![CDATA[xieyu33333@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node学习笔记二]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/02/12/node-2/"/>
    <updated>2014-02-12T10:44:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/02/12/node-2</id>
    <content type="html"><![CDATA[<h3>npm包简介</h3>

<p>Node可以以包的形式封装插件，不同于Ruby的gem包，Node的包默认并不是全局安装的，而是安装在项目目录中的<code>node_modules</code>目录下。只作用于项目目录。<br/>
如果需要全局安装，比如一些带有命令行工具的npm包，在安装时需要加上<code>-g</code>命令，例如：</p>

<pre><code>$ npm install -g supervisor
</code></pre>

<p>使用全局模式安装时,npm 会将包安装到系统目录,譬如 <code>/usr/local/lib/node_modules/</code>,同时 <code>package.json</code> 文件中 bin 字段包含的文件会被链接到 <code>/usr/local/bin/</code>。</p>

<p>需要注意的是使用全局模式安装的包并不能直接在 JavaScript 文件中用 require 获得,因为 require 不会搜索 /usr/local/lib/node_modules/。如果想要require全局包，可以使用</p>

<pre><code>$ npm link package
</code></pre>

<p>这个命令会在项目内的<code>node_modules</code>创建一个指向全局包的符号链接。通过这种方法,我们就可以把全局包当本地包来使用了。</p>

<h3>制作npm包</h3>

<p> 一个基本的npm包需要包含一个<code>package.json</code>文件，一个<code>lib</code>文件夹,在<code>lib</code>文件夹内编写主要的逻辑，<code>package.json</code>文件则包含了该npm包的一些信息。
 <code>package.json</code>需要包含一个名为main的key，</p>

<pre><code> {
  "main": "./lib/test.js",
 }  
</code></pre>

<p> 完整的npm包往往还需要一些其他的功能，例如测试，文档等</p>

<ul>
<li><code>package.json</code> 必须在包的顶层目录下;</li>
<li>二进制文件应该在 <code>bin</code> 目录下; * JavaScript代码应该在 <code>lib</code> 目录下; * 文档应该在 <code>doc</code> 目录下; * 单元测试应该在 <code>test</code> 目录下。
包的功能完成后，使用
 $ npm init
这时会让你填写package的value，依次填写即可，完成后就可以发布了。</li>
</ul>


<h3>发布npm包</h3>

<p>如果要发布npm包，需要注册一个账号，首先需要执行</p>

<pre><code>$ npm config set email
</code></pre>

<p>然后执行</p>

<pre><code>$ npm adduser
</code></pre>

<p>之后就可以跟据提示输入用户名，密码，邮箱。完成后输入<code>npm whoami</code>可以查询是否注册成功。
注册完成后，在项目目录输入</p>

<pre><code>$ npm publish
</code></pre>

<p>稍后片刻就完成项目的发布了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读类应用服务端通信分析]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/02/11/app-an/"/>
    <updated>2014-02-11T22:22:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/02/11/app-an</id>
    <content type="html"><![CDATA[<h3>公开阅读类</h3>

<h4>知乎日报</h4>

<p>服务器：zhihu_nginx<br/>
传输协议：http <br/>
数据传输格式：Json <br/>
数据安全：无<br/>
登录方式：微博登录，oauth2</p>

<h4>今日头条</h4>

<p>服务器：nginx/1.2.1，Content-Encoding:gzip <br/>
传输协议：http<br/>
数据传输格式：Json<br/>
数据安全：无</p>

<h4>网易新闻</h4>

<p>服务器：nginx Content-Encoding:gzip<br/>
传输协议：http, 只在登录和分享时通过https<br/>
数据传输格式：Json<br/>
登录方式：网易自身的登录系统</p>

<h3>社交阅读类</h3>

<h4>知乎</h4>

<p>服务器：zhihu_nginx<br/>
传输协议：https&amp;http，主要信息通过https，图片等静态内容通过http<br/>
数据传输格式：Json<br/>
数据安全：即使用户不登陆，也需要一个Authorization：oauth a09343e8e67e44b29e0d850c14c7bf进行验证才能访问接口，登陆后只是验证变成了Authorization： Bearer f15bd82a1fe845ce971ddc78e5090943。<br/>
登录方式：支持自身的登录系统和新浪微博登录</p>

<h4>新浪微博</h4>

<p>服务器：nginx/1.2.0，Content-Encoding:gzip<br/>
传输协议：https<br/>
数据传输格式：XML&amp;Json，主要内容采用XML格式，部分采用Json格式  <br/>
数据安全：主要内容公开api,个人好友列表、私信等个人内容通过将用户token加入参数中保证一定的安全性。   <br/>
登录：oauth登录，原先采用的oauth1，目前从参数上看，oauth1和oauth2是同时存在的。</p>

<h4>大众点评</h4>

<p>服务器：nginx<br/>
传输协议：http, 只在登录和分享时通过https  <br/>
数据传输格式：二进制<br/>
数据安全：多数api在权限上是公开的，但由于数据传输采用二进制，不知道其编码解码规则的话一般很难获取数据，点评数据等涉及用户的数据也通过header中的token进行验证。
登录方式：自身的登录系统，第三方登录包括：微博，微信，开心，人人，QQ</p>

<h3>总结</h3>

<h4>服务器</h4>

<p>从http请求返回头来看，直面客户的服务器都采用了nginx，至于是做web server还是反向代理就不知道了。新浪微博，网易新闻，今日头条都开启了Gzip压缩。</p>

<h4>传输协议</h4>

<p>公开阅读类应用由于其数据本无需保密，使用http协议就可以了。社交阅读类采用https进行传输加密。</p>

<h4>数据安全</h4>

<p>公开阅读类的数据接口没有什么安全措施，社交阅读类测试的几个都是通过Authorization token进行验证，其中知乎和点评是通过在header中加入token,而微博则是将token放在参数中。点评采用了二进制的传输格式增加了额外的安全性。</p>

<h4>传输格式</h4>

<p>数据传输格式方面，Json的使用最为广泛。<br/>
xml由于其传输体积大，解析慢，不适合作为C/S间的数据传输。<br/>
二进制传输体积最小，性能最佳，但是需要开发上做更多的工作，而且需要考虑开源的二进制传输协议的语言支持问题，比如api同时为手机客户端和网页提供api的时候，网页端是难以处理二进制数据的。<br/>
Json格式目前来看性能足够，开发效率和兼容性则更好，可以为所有平台提供api,综合来说是较为合适的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node学习笔记一]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/02/07/node-note-1/"/>
    <updated>2014-02-07T16:16:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/02/07/node-note-1</id>
    <content type="html"><![CDATA[<h3>使用 supervisor</h3>

<p> Node.js 只有在第一次引用到某部份时才会去解析脚 本文件,以后都会直接访问内存,避免重复载入,但是在开发调试时很不方便，可以使用小工具 supervisor 在文件发生变化时自动重新加载。</p>

<pre><code>$ npm install -g supervisor
</code></pre>

<p>安装完成后使用命令</p>

<pre><code>supervisor app.js
</code></pre>

<p>这样就可以了，由于该命令比较长，建议设置一个alias,例如我设置的是cnode，使用时直接使用<code>cnode app.js</code>就可以了</p>

<h3>模块</h3>

<p>模块是 Node.js 应用程序的基本组成部分,文件和模块是一一对应的。换言之,一个 Node.js 文件就是一个模块<br/>
应用模块使用两个关键字：<code>require</code>和<code>exports</code>。如下例：在app.js中引入并使用content.js。</p>

<p>app.js</p>

<pre><code>content = require('./content')
console.log(content.text);
content.log();
</code></pre>

<p>content.js</p>

<pre><code>exports.text = "Hello World!";
exports.log = function(){
  console.log("Success!");
} 
</code></pre>

<p>最后执行<code>node app.js</code>的结果是</p>

<pre><code>Hello World!
Success!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Homebrew安装的程序添加模块]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/01/06/brew-add-module/"/>
    <updated>2014-01-06T17:31:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/01/06/brew-add-module</id>
    <content type="html"><![CDATA[<p>在MAC OS平台上，我们常常使用Homebrew安装程序，但是如果安装成功后需要添加模块，很多同学就不知道怎么处理了。最后往往是采用源码包编译的方式绕过这个问题。</p>

<p>我在安装nginx的时候就遇到了这个问题，分享一下解决的方案：
首先使用<code>brew uninstall nginx</code>卸载原来的程序。</p>

<p>Homebrew安装程序是根据一个Ruby文件来定义软件包安装配置（英文叫做formula，处方，方案的意思）。
使用<code>brew edit nginx</code> 命令可以打开这个文件，里面有一个名为args的数组，只需要把<code>"--with-your_module"</code>添加到这个数组中就可以了。</p>

<p>最后重新用<code>brew install nginx</code>进行安装，安装后由于原先位于<code>/usr/local/bin</code>目录中的软链接没有删除，会报一个错误，使用<code>rm /usr/local/bin/nginx</code>删除原来的软链接，然后使用<code>brew link nginx</code>重新生成软链接即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[个人简历]]></title>
    <link href="http://xieyu33333.github.com/blog/2014/01/02/ge-ren-zai-xian-jian-li/"/>
    <updated>2014-01-02T15:25:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2014/01/02/ge-ren-zai-xian-jian-li</id>
    <content type="html"><![CDATA[<h2>基本信息</h2>

<p>姓   名：  谢 郁   <br/>
性   别：  男   <br/>
出生日期： 1989年5月20日  <br/>
毕业院校： 电子科技大学成都学院微电子技术系<br/>
电子邮箱： xieyu33333@gmail.com</p>

<h2>技术能力</h2>

<ul>
<li>可以同时适应MAC, Linux, Windows环境的开发，熟悉命令行工具。</li>
<li>工作以来一直使用git, 熟悉git工作流。</li>
<li>熟练掌握 Ruby on Rails 框架，对sinatra、grape等轻量级框架也有一些了解。</li>
<li>熟练掌握jQuery</li>
<li>熟练掌握Bootstrap/foundation, 可以手写/使用框架构建响应式页面。</li>
<li>熟悉LESS&amp;SCSS等CSS预处理语言。</li>
<li>熟悉常见的浏览器兼容性问题，有较丰富的兼容性问题处理经验。</li>
</ul>


<h2>工作履历</h2>

<h3>2012年1月-2012年10月：尝试互联网方向创业</h3>

<p><strong>工作内容：</strong>  <br/>
当时准备做一个评测推荐类的网站，由于资源和技术能力不足，做了大半年后放弃。</p>

<h3>2012年11月-2013年5月：卓衡创盟应用科技（北京）有限公司</h3>

<p><strong>工作内容：</strong> <br/>
主要负责前端页面开发，还同时做服务端的Ruby on Rails开发。  <br/>
<strong>项目经验：</strong></p>

<ul>
<li>moster产品展示网站：<a href="http://mostor.cc">mostor.cc</a></li>
<li>联通云平台前端部分：内部系统，无公开网址</li>
<li>新闻出版总署网站前端部分：<a href="http://www.gapp.gov.cn/">http://www.gapp.gov.cn/</a></li>
<li>“沃缤纷”手机应用项目的后台管理部分：<a href="http://as.baidu.com/a/item?docid=2403659&amp;pre=web_am_software&amp;pos=software_1013_19&amp;f=software_1013_19">沃缤纷</a></li>
</ul>


<h3>2013年5月 - 至今：北京世纪乐知（CSDN）</h3>

<p><strong>工作内容:</strong> <br/>
以Ruby开发为主，主要负责<a href="http://bbs.csdn.net">CSDN论坛</a>、<a href="http://share.csdn.net">CSDN Share</a>、<a href="http://www.iteye.com">Iteye</a>、<a href="http://ask.csdn.net">CSDN Ask</a>、四个产品的维护，升级。</p>

<p><strong>项目经验：</strong></p>

<ul>
<li>CSDN Share的主要开发, <a href="http://share.csdn.net">share.csdn.net</a>。</li>
<li>内部的基于sinatra的异步队列服务。</li>
<li>社区产品线的维护升级工作</li>
</ul>


<h2>个人项目</h2>

<ul>
<li><a href="http://textlearn.org">Text-Learn</a>,一个原创教程的尝试。</li>
<li>接某图书工作室的一本CSS开发相关的书籍，尚未出版。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doc转换为pdf的解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/30/doczhuan-huan-wei-pdfde-jie-jue-fang-an/"/>
    <updated>2013-12-30T10:16:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/30/doczhuan-huan-wei-pdfde-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<p>单纯的将Doc转换为pdf很简单，使用office软件直接在图形界面下转换即可，但是如果涉及到批量转换，最好还是使用命令行工具。</p>

<h2>一、unoconv</h2>

<h4>简介</h4>

<p>unoconv 利用 LibreOffice/OpenOffice 的 UNO 接口实现了命令行文档格式转换功能，支持所有 LibreOffice/OpenOfficee 支持的文件格式。
因此不管机器上安装的是LibreOffice还是OpenOffice，都可以使用unoconv进行格式转换，不过需要注意的是一台机器不能同时安装LibreOffice和OpenOffice。</p>

<h4>使用</h4>

<p>基础转换命令：</p>

<pre><code>$ unoconv -f pdf xxx.doc 
</code></pre>

<p>批量转换：
可以默认采用2002端口开启监听器（或者通过-p/&#8211;port参数指定端口），例如：</p>

<pre><code>unoconv --listener &amp;
sleep 20
unoconv -f pdf *.odt
unoconv -f doc *.odt
unoconv -f html *.odt
kill -15 %-
</code></pre>

<p>指定转换页数，文件名等：</p>

<pre><code>-e, --export=name=value  set export filter options
 eg. -e PageRange=1-2
</code></pre>

<p>实例：</p>

<pre><code>$ unoconv -f pdf -e PageRange=1-2 test.docx
</code></pre>

<p>这样就实现了只转换前两页。</p>

<h4>转换效果</h4>

<p>我的机器安装的是LibreOffice，效果还不错，和LibreOffic中的显示基本保持一致。不过少数doc文档在LibreOffice中显示有问题，因此转换后也是有问题的。</p>

<h2>二、Abiword</h2>

<h4>简介：</h4>

<p>AbiWord是一个以GNU通用公共许可证授权的免费文字处理软件，名称&#8221;AbiWord&#8221;是派生自意谓开放的西班牙语单词&#8221;Abierto&#8221;；支持Linux、Mac OS X（PowerPC）、Microsoft Windows、ReactOS、BeOS与其他操作系统，但对每个操作系统的支持程度都有所不同。
用它编辑文件后保存为.abw后缀，打开后为xml格式的文档。</p>

<h4>使用</h4>

<p>基础转换命令：</p>

<pre><code>    $ abiword --to=pdf xxx.doc
</code></pre>

<h4>实际转换效果</h4>

<p>实际转换效果并不好，测试下格式解析不佳，和原文差距较大，局部出现布局错乱的现象。</p>

<h2>三、cups-pdf</h2>

<h4>简介</h4>

<p>cups-pdf是一个虚拟打印机，输出效果和打印预览一致。这种方案保真性应该是最高的，但是相对来说不是很灵活，只能转成pdf。</p>

<h4>使用</h4>

<p>安装：</p>

<pre><code>$ sudo apt-get install cups-pdf
</code></pre>

<p>转换命令：</p>

<pre><code>$ oowriter -pt pdf your_word_file.doc
$ libreoffice -pt pdf your_word_file.doc
</code></pre>

<p>转换后的文件默认会保存在～/PDF文件夹中,不过中文文件的命名会有问题，会被命名为三位数字。</p>

<pre><code>$ libreoffice --headless --print-to-file --printer-name pdf --outdir /home/xieyu xxx.doc
</code></pre>

<p>使用<code>--print-to-file</code>选项可以指定打印输出目录和打印机，不过这里输出的是ps后缀的文件，可以重命名成pdf.<br/>
我这里(3.5版本)测试<code>--print-to-file</code>命令偶尔会出现文字解析不出来的情况，和使用Libreoffice的<code>--convert-to</code>选项结果一样。而4.1版本没有这个问题。  <br/>
<strong>使用模拟打印的方式无法指定pdf文件的命名，灵活性不够好。</strong></p>

<h2>四 LibreOffice自带的转换命令</h2>

<pre><code>$ libreoffice --headless --convert-to pdf *.doc
$ soffice --headless --convert-to pdf *.doc
</code></pre>

<p>注意：在GUI下使用，如果已经开启了桌面环境的Libreoffice,命令行无法生效。
我这里(3.5版本)测试偶尔会出现文字解析不出来的情况，而4.1版本没有这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown转换为pdf的解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/30/markdownzhuan-huan-wei-pdffang-an/"/>
    <updated>2013-12-30T10:10:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/30/markdownzhuan-huan-wei-pdffang-an</id>
    <content type="html"><![CDATA[<h2>解决方案一：Kitabu</h2>

<h3>简介</h3>

<p>Kitabu是使用ruby生成电子书的方案，它本身支持markdown转换为epub和html格式，不过通过调用其他指定的依赖
来转换为mobi、pdf、txt等其他格式。 <br/>
<strong>依赖prince进行html向pdf的转换。</strong>      <br/>
<strong>依赖html2text进行html向txt的转换。</strong> <br/>
<strong>依赖KindleGen进行epub向mobi的转换。</strong> <br/>
Kitabu支持代码高亮，默认使用codeRay，也可以安装 pygments.rb进行代替 。 <br/>
Github地址：<a href="https://github.com/fnando/kitabu">https://github.com/fnando/kitabu</a></p>

<h3>安装方法</h3>

<h4>第一步 安装 Kitabu</h4>

<pre><code>$ gem install kitabu            
</code></pre>

<p>安装完毕后就可以使用kitabu系列命令了。</p>

<h4>第二步 检查需要的依赖是否安装</h4>

<pre><code>$ kitabu check    
</code></pre>

<p>命令行中会给出哪些已经安装，哪些未安装。例如：</p>

<pre><code> Prince XML: Converts HTML files into PDF files.
 Installed.
 KindleGen: Converts ePub e-books into .mobi files.
 Installed.
 html2text: Converts HTML documents into plain text.
 Not installed.
 pygments.rb: A generic syntax highlight. If installed, replaces CodeRay.
 Not installed.
</code></pre>

<h4>第三步 生成电子书制作目录</h4>

<pre><code>$ kitabu new mybook          
</code></pre>

<p>在当前文件夹下生成一个名为mybook的文件夹，进入文件夹后可以看到如下文件结构：</p>

<pre><code>mybook
    ├── code
    ├── config
    │   ├── helper.rb
    │   └── kitabu.yml
    ├── images
    ├── output
    ├── templates
    │   ├── epub
    │   │   ├── cover.erb
    │   │   ├── cover.png
    │   │   ├── page.erb
    │   │   └── user.css
    │   └── html
    │       ├── layout.css
    │       ├── layout.erb
    │       ├── syntax.css
    │       └── user.css
    └── text
        └── 01_Welcome.md
</code></pre>

<h4>第四步 生成各种格式的电子书</h4>

<pre><code>$ kitabu export
</code></pre>

<p>生成的文件会放在output文件夹中。</p>

<h3>使用中遇到的问题</h3>

<h4>转换PDF时中文无法解析</h4>

<p>解决方法： <br/>
  1.需要在本地安装中文字体。  <br/>
  2.在模板中添加中文字体。</p>

<h4>PDF中的代码出现没有对齐的情况。</h4>

<pre><code>Prince XML: Converts HTML files into PDF files.
Installed.
KindleGen: Converts ePub e-books into .mobi files.
Installed.
html2text: Converts HTML documents into plain text.
Not installed.
pygments.rb: A generic syntax highlight. If installed, replaces CodeRay.
Not installed.
</code></pre>

<h2>目前最常用的解决方案：pandoc</h2>

<h3>pandoc简介</h3>

<p>如果你需要文件格式的转换，pandoc 可以成为你的瑞士军刀，它可以将下列格式： markdown, reStructuredText, textile, HTML
, DocBook, LaTeX, MediaWiki markup, OPML,  Haddock 转换为：</p>

<pre><code>     HTML formats: XHTML, HTML5, and HTML slide shows using Slidy, reveal.js, Slideous, S5, or DZSlides.         
     Word processor formats: Microsoft Word docx, OpenOffice/LibreOffice ODT, OpenDocument XML
     Ebooks: EPUB version 2 or 3, FictionBook2
     Documentation formats: DocBook, GNU TexInfo, Groff man pages, Haddock markup
     Outline formats: OPML
     TeX formats: LaTeX, ConTeXt, LaTeX Beamer slides
     PDF via LaTeX
     Lightweight markup formats: Markdown, reStructuredText, AsciiDoc, MediaWiki markup, Emacs Org-Mode, Textile
     Custom formats: custom writers can be written in lua.
</code></pre>

<p>pandoc支持多种格式的转换，可以直接用命令行由markdown转换为pdf。</p>

<pre><code>    $ pandoc demo.md -o demo.pdf
</code></pre>

<p>虽然这个命令表面上是直接转换，但实际还是通过先转换为LaTeX格式，再转为pdf的。  <br/>
这个命令对我们没有实际意义。因为无法加载样式，也无法解析中文。实用情况下还是
需要将文档转换为html或者LaTeX文件格式，通过html模板或者LaTeX的tex模板进行样式定制。</p>

<p><strong>LaTeX（Donald E. Knuth（高德纳）发明的）是一个科技出版界常用的格式。</strong></p>

<h3>pandoc安装</h3>

<h4>第一步，安装pandoc</h4>

<pre><code>    $ sudo apt-get install pandoc        
</code></pre>

<h4>第二步，安装texlive</h4>

<pre><code>    $ sudo apt-get install texlive-xetex texlive-latex-recommended texlive-latex-extra      
</code></pre>

<p>TexLive是LaTeX的工具集，由于转换pdf必须先转换成LaTeX。</p>

<h4>第三步，安装中文字体</h4>

<pre><code>    $ sudo apt-get install ttf-arphic-gbsn00lp ttf-arphic-ukai ttf-wqy-microhei ttf-wqy-zenhei        
</code></pre>

<p>本机必须安装有中文字体，否则无法正确的转换中文。</p>

<h4>第四步，安装<a href="http://fletcherpenney.net/multimarkdown/install/#linux">multimarkdown</a></h4>

<pre><code>    git clone git://github.com/fletcher/peg-multimarkdown.git
</code></pre>

<p>下载后是一个文件夹，cd进去后执行make命令即可。<br/>
用于将多个md文件一起进行转化为一个pdf文件。</p>

<h3>怎么使用？</h3>

<h4>示例</h4>

<p><a href="http://johnmacfarlane.net/pandoc/demos.html">官方网站</a></p>

<pre><code>    pandoc -N --template=mytemplate.tex --variable version=1.9 SLIDES.md --latex-engine=xelatex --toc -o example14.pdf
</code></pre>

<p>示例页里还有很多别的例子，其中将markdown文件转换成网页的sldes非常吸引人</p>

<pre><code>    pandoc -s –mathml -i -t dzslides SLIDES -o example14a.html
    pandoc -s –webtex -i -t slidy SLIDES -o example14b.html
    pandoc -s –webtex -t -t s5 SLIDES -o example14c.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 同步/异步/多线程模型测试]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce/"/>
    <updated>2013-12-25T11:30:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/25/ruby-tong-bu-slash-yi-bu-slash-bing-fa-mo-xing-ping-ce</id>
    <content type="html"><![CDATA[<p>测试条件是对一个json接口进行1000次调用。</p>

<h3>同步模型：</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
1000.times do
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
</code></pre>

<p>接口延迟约15ms,执行总时间1分25秒。当接口延迟5ms左右时执行总时间约25秒</p>

<h3>异步模型</h3>

<p>异步回调模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'json'
1000.times do
  EventMachine.run {
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    http.errback { p 'Uh oh'; EM.stop }
    http.callback {
      req = http.response
      @slides = JSON.parse(req)["data"]["list"]
      p @slides[0]
      EM.stop
    }
  }
end
</code></pre>

<p>纤程模型：</p>

<pre><code>require 'rubygems'
require 'eventmachine'
require 'em-http-request'
require 'em-synchrony'
require 'json'
require 'em-synchrony/em-http'   
1000.times do
  EM.synchrony do
    http = EM::HttpRequest.new("http://test.net/api/format/json/").get
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    p @slides[0]
    EM.stop
  end
end
</code></pre>

<p>两种异步模型基本一样，在接口延迟15ms时测试均为50秒完成，接口延迟5ms时20+秒，和同步模型基本没有差别。</p>

<h3>多线程模型</h3>

<pre><code>require 'json'
require 'open-uri'
require 'net/http'
def func1
  uri=URI("http://test.net/api/format/json/")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["list"]
  p @slides[0]
end
200.times do
  threads = []
  5.times do 
    threads &lt;&lt; Thread.new { func1 }
  end
  threads.each { |t| t.join }
end
</code></pre>

<p>接口延迟15ms时，5并发执行200次测试42秒完成，最快，接口延迟5ms时8秒完成，最快。不过在测试10并发的时候会出现不稳定的情况，50并发测试高达3分半。</p>

<h3>Node.js模型</h3>

<pre><code>var http = require('http')
var options = {
  host: '117.79.93.206',
  port: 80,
  path: 'http://test.net/api/format/json/'
};
function get_message(){
    http.get(options, function(res){
        var body = '';
        res.on('data', function(chunk) {
            body += chunk;
        });
        res.on('end', function() {
            var content = JSON.parse(body)
            console.log(content.data.list[0]);
        });
        }).on('error', function(e) {
        console.log("Got error: " + e.message);
    });
}
for(i=0; i&lt;1000; i++){
    get_message();
}
</code></pre>

<p>node.js果然名不虚传，接口延迟15ms,下约4秒完成，接口延迟5ms下平均2秒钟就可以完成，秒杀ruby。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails中间层解决方案]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an/"/>
    <updated>2013-12-20T15:34:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/12/20/railszhong-jian-ceng-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h3>调用API构建前端</h3>

<p>一般情况下，rails应用都是从数据库进行数据获取，而采用API调用的话，就不再需要model层了，只需要在控制器中用http库进行接口调用就可以了，大大简化了结构。
example:</p>

<pre><code>require 'open-uri'
require 'json'
require 'net/http'
def index  
  uri = URI("http://test.csdn.net/api/format/json")
  req = Net::HTTP.get(uri)
  @slides = JSON.parse(req)["data"]["contents"]
end
</code></pre>

<h3>问题：多个API调用时的阻塞问题</h3>

<pre><code>def index  
  uri_one = URI("http://test.csdn.net/api/1/format/json")
  uri_two = URI("http://test.csdn.net/api/2/format/json")
  uri_three = URI("http://test.csdn.net/api/3/format/json")
  ......
  req_one = Net::HTTP.get(uri_one)
  req_two = Net::HTTP.get(uri_two)
  req_three = Net::HTTP.get(uri_three)
  ......
  @slides = JSON.parse(req)["data"]["contents"]
  ......
end
</code></pre>

<p>如果有10个API调用，每个<code>Net::HTTP.get(uri)</code>通信耗时30ms，那么就是300ms的时间。</p>

<h3>解决方案一：多线程处理</h3>

<pre><code>threads = []
threads &lt;&lt; Thread.new {@req_one = Net::HTTP.get(uri_one)}
threads &lt;&lt; Thread.new {@req_two = Net::HTTP.get(uri_two)}
threads &lt;&lt; Thread.new {@req_three = Net::HTTP.get(uri_three)}
......
threads.each { |t| t.join }
data = JSON.parse(@req_one)["data"]
</code></pre>

<p>多进程是抢占资源的一个模型，并非并行计算，比如线程1执行一个http通信后中间有30ms的I/O时间，那么这段阻塞的时间就会被线程2抢占。
开启多线程并行处理，可以很大程度上提高处理速度。但是有两个问题：
一、开多个线程以及线程间的切换造成资源开销增加，实际上降低了应用的吞吐能力。
二、由于Ruby存在GIL (Global Interpreter Lock)，并不能真正利用多线程进行并行计算。（JRuby 去除了 GIL，是真正意义的多线程，既能应付 IO Block，也能充分利用多核 CPU 加快整体运算速度。）</p>

<h3>解决方案二：采用异步模型处理</h3>

<h4>Ruby的异步解决方案：Eventmachine</h4>

<p>在Gemfile中添加：</p>

<pre><code>gem 'eventmachine'
gem 'em-http-request', :require =&gt; 'em-http'
</code></pre>

<p>控制器中的代码：</p>

<pre><code>EventMachine.run {
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  http.errback { 
    render :text "接口连接失败"; 
    EM.stop 
  }
  http.callback {
    req = http.response
    @slides = JSON.parse(req)["data"]["list"]
    @page_count = JSON.parse(req)["data"]["count"].to_i/18+1
    EM.stop
  }
}
</code></pre>

<p>这种方式不仅解决了阻塞问题，而且可以有效的提高系统的吞吐能力。但带来的问题是代码量增加，复杂逻辑下代码的复杂度成倍增加，不利于开发和维护。</p>

<h4>引入纤程（Fiber）,用同步代码编写异步程序</h4>

<p>在Gemfile中添加<code>gem 'em-synchrony'</code>。
控制器代码：</p>

<pre><code>EM.synchrony do
  http = EM::HttpRequest.new("http://test.csdn.net/api/1/format/json").get
  req = http.response
  @slides = JSON.parse(req)["data"]["list"]
  EM.stop
end
</code></pre>

<p>多个接口调用实例：</p>

<pre><code>require "em-synchrony"
require "em-synchrony/em-http"
require "em-synchrony/fiber_iterator"
EM.synchrony do
  concurrency = 2
  urls = ['http://url.1.com', 'http://url2.com']
  results = []
  EM::Synchrony::FiberIterator.new(urls, concurrency).each do |url|
    res = EventMachine::HttpRequest.new(url).get
    results &lt;&lt; res.response
  end
  puts results # all completed requests
  EventMachine.stop
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git branch]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/09/06/git-branch/"/>
    <updated>2013-09-06T11:14:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/09/06/git-branch</id>
    <content type="html"><![CDATA[<h3>创建操作</h3>

<h4>git branch</h4>

<p>列出所有的分支, -r参数表示列出所有远程的分支</p>

<h4>git branch branchname</h4>

<p>建立一个名为的分支,使用当前版本作为这个新分支的版本</p>

<h4>git branch</h4>

<p>建立一个名为的分支, 使用指定的 作为新分支的版本,这个start-point可以是其他的分支名称或者tag名称。</p>

<h3>删除操作</h3>

<h4>git branch -d</h4>

<p>删除分支 ; 如果你要删除的分支并没有被merge到当前分支的话，将产生一个错误提示。</p>

<h4>git branch -D</h4>

<p>同-d，但是不管要删除的分支是否已经merge到当前分支，都会删除</p>

<h3>切换操作</h3>

<h4>git checkout</h4>

<p>切换当前分支到 , 更新 working directory 到 所对应的版本</p>

<h4>git checkout -b</h4>

<p>按照的版本建立一个新的分支，并checkout到这个新分支上。</p>

<h4>git checkout -f</h4>

<p>忽略差异部分，强制切换，例如：
修改branch test, 但是没有commit，这时如果切换到master，会提示错误。使用-f 则会丢弃test中的修改，强制切换，如果切回test分支，刚才的修改也没了</p>

<p>一个特殊符号 “HEAD” 总是指向当前分支. 实际上git使用一个在.git目录中叫 “HEAD”的文件来记录当前分支:</p>

<pre><code>$ cat .git/HEAD
ref: refs/heads/master
</code></pre>

<p>示例：“master”分支是当初你执行git-clone时候，clone的一个远程repository的HEAD版本的一个copy.</p>

<pre><code>$ git branch -r
  origin/HEAD
  origin/html
  origin/maint
  origin/man
  origin/master
  origin/next
  origin/pu
  origin/todo
</code></pre>

<p>列出所有远程版本，origin是用来表示你当初执行git-clone时候的repository，你不可以直接checkout远程repository，但是你可以根据远程repository生成一个本地repository：</p>

<pre><code>$ git checkout -b my-todo-copy origin/todo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysqldump及用户权限设置]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/08/30/mysqldump/"/>
    <updated>2013-08-30T10:32:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/08/30/mysqldump</id>
    <content type="html"><![CDATA[<h3>新建用户</h3>

<p>我们查看mysql的root用户的port字段，其中有值为&#8217;%&#8217;的，代表除本地外的其他地址的链接，但是port = &#8216;%&#8217;的行在root用户组中排在最下面，因此远程链接数据库就会因权限不足而失败。
我们选择新建一个用户来进行远程数据备份：</p>

<pre><code>mysql&gt; insert into mysql.user(Host,User,Password) values("%","yourname",password("1234"));
</code></pre>

<p>这样就创建了一个新用户，然后是给用户授权：</p>

<pre><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'yourname'@'%'IDENTIFIED BY '1234';
</code></pre>

<p>刷新用户权限：</p>

<pre><code>mysql&gt; flush privileges;
</code></pre>

<h3>mysqldump</h3>

<p>用于将远程数据库导出到本地：</p>

<pre><code>mysqldump -h192.125.117.89 -uyourname -p1234 databasename &gt; /home/xieyu/databasename.sql
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程五：编写代码的代码]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five/"/>
    <updated>2013-07-14T21:06:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/14/metaprogramming-five</id>
    <content type="html"><![CDATA[<h2>Kernel#eval</h2>

<p>kernel#eval会直接 执行字符串中的代码，并返回执行结果，和javascript中的eval()一样。</p>

<h2>钩子方法</h2>

<h3>Class#inherited</h3>

<p>当类被继承时，调用该方法，平时它什么也不做。，可以通过覆写它来形成类似回调函数的用法。
example:</p>

<pre><code>class MyClass                         #inherited是Class的一个实例方法，对于一个特定的类，则是它的类方法。
    def self.inherited(param)         #注意inherited方法需要一个参数，参数是继承者的类名
        p "lala"
    end
end

MySonClass &lt; MyClass; end       #=&gt;"lala"
</code></pre>

<h3>更多钩子方法</h3>

<p>Class#inherited是最常用的，还有其他一些：
Module#includeed
Module#method_added
Module#method_removed
Module#method_undefined</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程四：类定义]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth/"/>
    <updated>2013-07-01T22:47:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/07/01/metaprogramming-forth</id>
    <content type="html"><![CDATA[<h2>类定义</h2>

<p>在ruby中，类定义和其他语言有所不同，当使用class关键字时，并非是在指定对象未来的行为方式，实际上是在运行代码。
类定义会返回最后一条语句的值。
每当通过class关键字打开一个类，这个类就成为当前类。在类定义中，当前对象self就是正在定义的类。</p>

<h3>类实例变量</h3>

<pre><code>class MyClass
    @var = 0
    def self.method_one
        @var = 1
    end

    def method_two
        @var = 2
    end

    def method_three
        @var = 3
    end

    class&lt;&lt;self 
        def method_four
            x=4
        end

        def method_five
            x=5
        end
    end
end

obj = MyClass.new
obj.method_two           #=&gt;2
obj.method_threee        #=&gt;3
MyClass.method_one       #=&gt;1
类实例变量只有类可以调用它，而类的实例则不行，实例变量则正好相反。
class&lt;&lt;self 用于一次性定义多个类方法
</code></pre>

<h3>类变量</h3>

<p>以@@开头，它们可以被子类或者类的实例所使用
后定义的同名类变量会覆盖之前的，不论它的位置，example：</p>

<pre><code>@@v = 1
class A
  @@v = 2
end
@@v                        #=&gt;2
</code></pre>

<h3>扁平化作用域</h3>

<p>使用class, def,  module关键字会产生作用域门.但是如果想在一个模块中共享变量,就需要用到扁平化作用域.
使用ClassName = Class.new , ModuleName = module.new , define_method: method_name do &#8230;.end
example:</p>

<pre><code>    my_var = "success"
    MyClass = Class.new do
      puts "#{my_var} is get"
      define_method :printvar do
        puts "#{my_var} is in the method"
      end
    end
    MyClass.new.printvar
</code></pre>

<h3>单件方法与类方法</h3>

<p>Ruby允许给单个对象添加方法，这就是单件方法。example:</p>

<pre><code>str = "hahaha"
def str.title?
    self.upcase == self
end
</code></pre>

<p>而类方法实际就是一种单件方法，因为类也是对象，它针对这个类生效。</p>

<h3>类宏</h3>

<p>Ruby对象没有属性，如果想要定义属性，就需要定义两个拟态方法，一个读方法和一个写方法。</p>

<pre><code>class MyClass
    def height=(val)
        @height = val
    end

    def height
        @height
    end
end
obj = MyClass.new
obj.height = "160cm"
obj.height     #=&gt;"160cm"

这样非常麻烦，我们可以使用module#attr_*系列方法，其中attr_reader()可以生成一个读方法；attr_writer()可以生成写方法；attr_accessor()则可以生成读写方法。
那么上面的例子就可以改写为：

class MyClass
    attr_accessor :height
end
</code></pre>

<h3>环绕别名</h3>

<p>从一个重新定义的方法中调用原始的，被重命名的版本。 三个步骤： 1. 通过alias 对原有方法定义一个别名 2. 覆写原有方法 3. 在该方法中调用别名方法 这样做的好处，可以改写原有方法，又不破坏原有功能 。</p>

<pre><code>    class String  
        alias :old_reverse :reverse
        def reverse 
            "x#{old_reverse}x"
        end
    end 
    "abc".reverse  =&gt;xcbax
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby元编程三：代码块]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third/"/>
    <updated>2013-06-29T20:53:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/29/metaprogramming-third</id>
    <content type="html"><![CDATA[<h2>闭包</h2>

<p>块可以作为一个闭包.
example:</p>

<pre><code>def my_method
    x="Goodbye"
    yield("cruel")
end
x = "Hello"
my_method {|y| "#{x} , #{y} world"}   #=&gt;Hello, cruel world
</code></pre>

<p>块获得了局部绑定的变量x，并一直带着它。块并不能接受方法中定义的x=&#8221;Goodbye&#8221;</p>

<h2>作用域与作用域门</h2>

<p>程序会在三个地方关闭前一个作用域，同时打开一个新的作用域：
类定义
模块定义
方法
它们分别用关键字class，module，def为标志每一个关键字都充当了一个作用域门。</p>

<h2>Proc类，proc，lambda , yield , &amp;操作符</h2>

<h3>将块转化为对象</h3>

<p>使用块需要分两步：1.把块的逻辑写好打包备用。2.调用块<br/>
块不是对象，如果想要存储一个块供以后执行，需要一个对象。<br/>
Ruby标准库提供Proc类，它接受一个块作为参数，从而将这个块转化为对象：</p>

<pre><code>inc = Proc.new { |x| x+1}
inc.call(2)                       #=&gt;3
</code></pre>

<p>而lambda ， proc 本质也是将块转化为Proc类的实例化对象</p>

<h3>lambda，proc的区别</h3>

<p>1.使用return关键字的时候，lambda从它本身返回，而proc则会在定义它的作用域中返回。</p>

<pre><code>def double(param)
    param.call*2
end
l=lambda {return 10}
double(l)                         #=&gt;20
p=proc {return 10}
double(p)                         #=&gt;报错LocalJumpError
</code></pre>

<p>2.参数数量
调用lambda的时候，如果参数数量不对则会报错，而proc会自动调整，忽略多余的，如果少了则会将其赋为nil</p>

<h3>&amp;操作符</h3>

<p>它可以实现：
1.把这个块传递给另一个方法
2.把一个块转化为proc,只需要去掉&amp;操作符即可。</p>

<p>example1：</p>

<pre><code>def math(a, b)
    yield(a , b)
end
def teach_math(a , b , &amp;block)
    puts math(a , b , &amp;black)
end
teach_math(2,3) {|x ,y| x*y}         #=&gt;6
</code></pre>

<p>example2:</p>

<pre><code>def test(&amp;block)
    block
end
t=test {|name| "Hello,#{name}"}
puts t.call("Tom")                         #=&gt;Hello , Tom
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_file]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-file/"/>
    <updated>2013-06-17T13:21:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-file</id>
    <content type="html"><![CDATA[<h3>检验存在</h3>

<pre><code>File.file? "test.txt"                  #检验文件存在性
File.exists? "test.txt"                #只检验存在性，无论是文件夹还是其他的文件类型
File.directory? "test.txt"             #检验文件夹存在性
</code></pre>

<h3>检验权限</h3>

<pre><code>File.readable?
File.writable?
File.executable?
File.owned?                         #文件是否属于当前用户组，windows下总是为true
</code></pre>

<h3>文件属性</h3>

<pre><code>File.stat                    # 文件的详细属性
&lt;File::Stat dev=0x700, ino=670451, mode=0100664, nlink=1, uid=1000, gid=1000, rdev=0x0, size=8, blksize=4096, blocks=8, atime=2013-06-05 09:37:38 +0800, mtime=2013-06-05 09:37:27 +0800, ctime=2013-06-05 09:37:27 +0800&gt;
</code></pre>

<p>atime ：最后读取的时间
mtime ：最后修改内容的时间
ctime ：最后修改的时间（包括修改权限等）</p>

<h3>文件列表</h3>

<pre><code>列出某路径下的文件列表
Dir.getwd                           #获取工作路径
Dir.chdir '/bin'                    #改变工作路径
Dir.mkdir 'haha'                    #创建工作路径
Dir.entries "/"
Dir.foreach("/") do |file|
  puts file
end
</code></pre>

<h3>文件写入</h3>

<pre><code>‘w’：写模式，覆盖写入
‘a’：附加模式，不会覆盖原有内容
open("test.txt" , "a") do |f|
  f.puts("aaaaaaaa")
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby的HTTP类库]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http/"/>
    <updated>2013-06-17T13:19:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-net-slash-http</id>
    <content type="html"><![CDATA[<h2>HTTP</h2>

<h3>NET::HTTP.get</h3>

<pre><code>    require "net/http"
    Net::HTTP.get('example.com', '/index.html')      # =&gt; String

    uri = URI('http://example.com/index.html?count=10')
    Net::HTTP.get(uri)        # =&gt; String
</code></pre>

<p>可以使用get方法进行下载:</p>

<pre><code>    File.open("test.jpg" , "w") do |f|
        f.write Net::HTTP.get(uri) 
    end
</code></pre>

<p>接收动态参数:</p>

<pre><code>    uri = URI('http://bbs.csdn.net/forums/ROR')
    params = { :limit =&gt; 10, :page =&gt; 3 }
    uri.query = URI.encode_www_form(params)
    res = Net::HTTP.get_response(uri)                         #get_response()方返回一个对象
    puts res.body if res.is_a?(Net::HTTPSuccess)
</code></pre>

<h2>URI</h2>

<h3>Basic</h3>

<pre><code>    require 'uri'
    uri = URI("http://foo.com/posts?id=30&amp;limit=5#time=1305298413")
    #=&gt; #&lt;URI::HTTP:0x00000000b14880
          URL:http://foo.com/posts?id=30&amp;limit=5#time=1305298413&gt;
    uri.scheme                                       #=&gt; "http"
    uri.host                                            #=&gt; "foo.com"
    uri.path                                            #=&gt; "/posts"
    uri.query                                          #=&gt; "id=30&amp;limit=5"
    uri.fragment                                     #=&gt; "time=1305298413"
    uri.to_s                                             #=&gt; "http://foo.com/posts?id=30&amp;limit=5#time=1305298413"
</code></pre>

<h3>Joins URIs.</h3>

<pre><code>    require 'uri'
    p URI.join("http://example.com/","main.rbx")                 # =&gt; #&lt; URL:http://localhost/main.rbx&gt;
    p URI.join('http://example.com', 'foo')                            # =&gt; #&lt; URL:http://example.com/foo&gt;
    p URI.join('http://example.com', '/foo', '/bar')                 # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo', 'bar')                  # =&gt; #&lt; URL:http://example.com/bar&gt;
    p URI.join('http://example.com', '/foo/', 'bar')                 # =&gt; #&lt; URL:http://example.com/foo/bar&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_array类常用方法]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-array/"/>
    <updated>2013-06-17T13:18:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-array</id>
    <content type="html"><![CDATA[<h2>取值</h2>

<h3>索引取值</h3>

<pre><code>    arr  = [1, 2, 3, 4, 5]
    arr[0]  = 1
    arr.at(0) = 1
</code></pre>

<h3>take &amp; drop</h3>

<pre><code>    arr.take 3              #=&gt;[1, 2, 3]
    arr.drop 3              #=&gt;[4, 5]
</code></pre>

<h2>插值</h2>

<h3>pop, push &amp;&amp; shift , unshift</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.push(5)              #=&gt; [1, 2, 3, 4, 5]
    arr &lt;&lt; 6                  #=&gt; [1, 2, 3, 4, 5, 6]
    arr.pop                    #=&gt; 6
    arr                          #=&gt; [1, 2, 3, 4, 5]
    arr.unshift 0             #=&gt;[0, 1, 2, 3, 4, 5]
    arr.shift                   #=&gt; 0 
    arr                           #=&gt;[1, 2, 3, 4, 5]
    arr.push [1, 2, 3]      #=&gt;[1, 2, 3, 4, 5, [1, 2, 3] ]
</code></pre>

<h3>insert</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.insert(3 , 5)        #=&gt;[1, 2, 3, 5, 4]              #第一个参是索引值
</code></pre>

<h2>删除</h2>

<h3>delete</h3>

<pre><code>    arr = [1, 2, 2, 3, 4]
    arr.delete 2            #=&gt;2
    arr                         #=&gt;[1, 3, 4]                       #delete根据实际值删除全部
    arr.delete_at 2        #=&gt;4 
    arr                         #=&gt;[1, 3]                           #delete_at根据索引值删除
</code></pre>

<h3>compact(去nil)</h3>

<pre><code>    arr  = [1, nil, 2 , nil, 3 , 4]
    arr.compact             #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, nil, 2 , nil, 3 , 4]
    arr.compact!            #=&gt;[1, 2, 3, 4]
    arr                           #=&gt;[1, 2, 3, 4]
                                  #compact: v, adj 紧凑的,使紧凑
</code></pre>

<h3>uniq(去重)</h3>

<pre><code>    arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
    arr.uniq                  #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]
    arr.uniq!
</code></pre>

<h2>迭代</h2>

<h3>each</h3>

<pre><code>    arr = [1, 2, 3, 4]
    arr.each {|a| puts a+1}               执行结果:1234 #=&gt;[1, 2, 3, 4]   #返回原数组
</code></pre>

<h3>map&amp;map!</h3>

<pre><code>    arr.map {|a| a+1}                            #=&gt;[2, 3, 4, 5]           # 返回block处理过后的结果
    arr.map! {|a| a+1}                          #=&gt;[2, 3, 4, 5]         # 返回block处理过后的结果,并改变原数组
</code></pre>

<h2>选择</h2>

<h3>不改变原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.select { |a| a &gt; 3 }     #=&gt; [4, 5, 6]
    arr.reject { |a| a &lt; 3 }     #=&gt; [3, 4, 5, 6]                     #可以理解为!select
    arr.drop_while { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                          #=&gt; [1, 2, 3, 4, 5, 6]       
</code></pre>

<h3>修改原数组</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.delete_if { |a| a &lt; 4 } #=&gt; [4, 5, 6]
    arr                         #=&gt; [4, 5, 6]

    arr = [1, 2, 3, 4, 5, 6]
    arr.keep_if { |a| a &lt; 4 } #=&gt; [1, 2, 3]
    arr                       #=&gt; [1, 2, 3]
</code></pre>

<h2>连接</h2>

<h2>判断</h2>

<h3>存在性</h3>

<pre><code>    arr = [1, 2, 3, 4, 5, 6]
    arr.include? 1                 #=&gt;true
</code></pre>

<h3>为空?</h3>

<pre><code>    arr.empty?                     #=&gt;false
</code></pre>

<h3>相等</h3>

<pre><code>    a=[1, 2]
    b=[1, 2]
    a.eql? b                          #=&gt;true 
    a.equal? b                       #=&gt;false    equal?只有当二者是同一个对象的时候才会为true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby_string]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/06/17/ruby-string/"/>
    <updated>2013-06-17T13:10:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/06/17/ruby-string</id>
    <content type="html"><![CDATA[<h2>字符串连接</h2>

<pre><code>+
concat()
&lt;&lt;                              #concat()的参数为整数则会转换成对应的字符串。
</code></pre>

<h2>正则匹配与替换</h2>

<h3>match , =~ , !~ 匹配</h3>

<pre><code>"name".match(/a/)         #=&gt;true
"name" =~ /a/               #=&gt;1                       #肯定匹配
"name" =~ /b/               #=&gt;nil
"name"  !~ /b/                #=&gt;false                 #否定匹配
</code></pre>

<h3>delete() &amp; delete!()  删除</h3>

<pre><code>example:
    str="ababaaaaaccccb"
    str.delete("ab")  #=&gt;"cccc"        #删除所有包含的字符串，而不是删除字符串组合
    str.delete!("ab")      #=&gt;"cccc"
    str #=&gt;"cccc"
    str.delete!("ab")      #=&gt;"nil"
    str #=&gt;"cccc"
</code></pre>

<h3>sub，gsub &amp;sub!,gsub! 替换</h3>

<pre><code>"abcdefaaa".sub(/a/ , "x")  #=&gt; "xbcdeaaa"
"abcdefaaa".sub(/a/ , "x")  #=&gt; "xbcdexxx"
第一个参数可以是正则，也可是字符串
</code></pre>

<h3>slice()&amp;slice!()</h3>

<pre><code>参数可以是索引值，索引范围(range) ， 正则 ， 字符串。返回匹配的字符串。
"abcdaaa".slice(1) #=&gt;"b"
"abcdaaa".slice(1..3) #=&gt; "bcd"
"abcdaaa".slice(-3..-1) #=&gt; "aaa"
"abcdaaa".slice(/a\w{3}a/) #=&gt; "abcda"
"abcdaaa".slice("abc") #=&gt; "abc"

slice!()会对原字符串进行切割，切掉匹配参数的部分
str ="abcdaaa"
str.slice!(0)
str="bcdaaa"
</code></pre>

<p>scan(regexp)
返回一个数组，所有匹配的字符串</p>

<h3>split</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[离职总结]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/18/something-known/"/>
    <updated>2013-05-18T15:44:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/18/something-known</id>
    <content type="html"><![CDATA[<h3>互联网方向和企业服务方向存在根本性的不同</h3>

<p>  现在OA,ERP系统等企业级服务等都在向web端，乃至移动端靠近，看起来好像和互联网服务区别越来越小，但是对于外包团队来说，区别是本质上的。</p>

<p>  互联网产品面向普罗大众，要求是使用简单，可接受度高，个性化。而且互联网方向主要客户来自创业者以及传统行业面向用户渠道的互联网化。业务逻辑相对简单，但对品质的要求是比较高的。同样，这部分客户的资金实力往往比较弱。因此如果公司面向互联网渠道提供服务，我认为应该在设计，咨询，技术支持等方面入手。消耗的时间相对少，同时可以做多个客户，以量取胜。不要轻易尝试承接整体工程。风险大，周期长，利润低，除非有渠道可以做政府的项目，或者客户需求和自有产品对的上号。</p>

<p>  而需要企业级服务的企业往往规模庞大，业务逻辑相当复杂，每个项目的价格都会比较高，赚头足，但是对外包企业的要求也比较高：首先，要有自己的基础产品，开发要基于基础产品来做，而不是从头开始，其次人手必须充足，这种项目往往不是2,3个精英程序员就可以搞定的，因为有大量的基础的，低技术含量的工作需要做，做这些事情使用高级程序员是非常不划算的，因此需要将功能拆分，通过使用大量的水平一般，薪水低廉的程序员来做，一方面需求使然，一方面控制风险。我认为这也是做这种业务的企业多使用.net，jsp的原因：容易招到大量的中低水平的程序员。</p>

<h3>公司的问题</h3>

<h4>没有根据自身特点选准方向</h4>

<p>1.外包方面的主管是设计外包出身，那么在设计人员招聘，设计咨询，忽悠客户方面是内行，并且有多年为运营商做前端，设计服务的经验。但是对技术评估方面并不在行，也没法在技术方面和客户进行沟通。</p>

<p>2.技术主管虽然先后就职于百度，人人，编程能力，学习能力，沟通能力都非常强，但是经验是在互联网方向，对于企业级的服务并不在行，而且他本人也对外包毫无兴趣。</p>

<p>因此很明显了，实际公司是无力组建一个面向企业的技术外包团队的，而面向互联网，也仅仅是可以做，但做不好，因为打心眼里就不想做。技术方面如果找不到适合带外包团队的人，那就干脆不要做，专心做产品去，外包全部由设计来支持，技术方面最多做一些咨询服务就好了。可偏偏公司要去接互联网前后台乃至app全包的项目。</p>

<h4>明明是小公司，偏偏有大公司的毛病</h4>

<p>就是一个创业型的公司，虽然有母公司的大力支持，但是实力仍然有限，但是信息隔离，缺乏激情，管理僵化，事不关己，高高挂起的毛病还是通过领导人从母公司带了过来。</p>

<h4>CEO来自投资方</h4>

<p>由于公司是香港集团的全资子公司，CEO是该集团的一位经理，但他同时管理多家控股公司，其他公司和母公司业务比较贴近，做硬件方面，更多的是资本，渠道的东西，这方面他很了解，而我们这边做软件，设计则更多是看人。一方面CEO并非所有精力都在这边，一方面他对设计和软件业务并不了解。而现在的情况是一个本该是政委，或者监军的人坐在了主帅的位置上。虽然这不是他的错，他也尽自己最大的努力放权给更懂业务的主管们，但毕竟身在那个位置，很多决策需要他来定。不可避免的会出现外行领导内行的情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[%Q, %q, %W, %w, %x, %r, %s]]></title>
    <link href="http://xieyu33333.github.com/blog/2013/05/12/percent-w-and-so-on/"/>
    <updated>2013-05-12T23:29:00+08:00</updated>
    <id>http://xieyu33333.github.com/blog/2013/05/12/percent-w-and-so-on</id>
    <content type="html"><![CDATA[<h3>%Q</h3>

<p>遇到引号嵌套的时候我们往往需要使用反斜线来实现转义，使用%Q(&#8230;)可以实现同样的效果，最终输出字符串，并且支持使用#{}操作变量</p>

<pre><code>&gt;&gt; %Q(Joe said: "Frank said: "#{what_frank_said}"")
=&gt; "Joe said: "Frank said: "Hello!"""
</code></pre>

<p>The parenthesis “(…)” can be replaced with any other non-alphanumeric characters and non-printing characters (pairs), so the following commands are equivalent:</p>

<pre><code>&gt;&gt; %Q!Joe said: "Frank said: "#{what_frank_said}""!
&gt;&gt; %Q[Joe said: "Frank said: "#{what_frank_said}""]
&gt;&gt; %Q+Joe said: "Frank said: "#{what_frank_said}""+
</code></pre>

<p>You can use also:</p>

<pre><code>&gt;&gt; %/Joe said: "Frank said: "#{what_frank_said}""/
=&gt; "Joe said: "Frank said: "Hello!"""
</code></pre>

<h3>%q</h3>

<p>%q和%Q大同小异，只是用于单引号，因此无法支持变量</p>

<pre><code>&gt;&gt; %q(Joe said: 'Frank said: '#{what_frank_said} ' ')
=&gt; "Joe said: 'Frank said: '\#{what_frank_said} ' '"
</code></pre>

<h3>%W</h3>

<p>转化为数组并支持变量</p>

<pre><code>&gt;&gt; %W(#{foo} Bar Bar\ with\ space)
=&gt; ["Foo", "Bar", "Bar with space"]
</code></pre>

<h3>%w</h3>

<p>转化为数组，但不支持变量</p>

<pre><code>&gt;&gt; %w(#{foo} Bar Bar\ with\ space)
=&gt; ["\#{foo}", "Bar", "Bar with space"]
</code></pre>

<h3>%x</h3>

<p>Uses the ` method and returns the standard output of running the command in a subshell.The syntax is similar to %Q.</p>

<pre><code>&gt;&gt; %x(echo foo:#{foo})
=&gt; "foo:Foo\n"
</code></pre>

<h3>%r</h3>

<p>转化为正则表达式</p>

<pre><code>&gt;&gt; %r(/home/#{foo})
=&gt; "/\\/home\\/Foo/"
</code></pre>

<h3>%s</h3>

<p>转化为symbols.It’s not subject to expression substitution or escape sequences.</p>

<pre><code>&gt;&gt; %s(foo)
=&gt; :foo
&gt;&gt; %s(foo bar)
=&gt; :"foo bar"
&gt;&gt; %s(#{foo} bar)
=&gt; :"\#{foo} bar"
</code></pre>
]]></content>
  </entry>
  
</feed>
